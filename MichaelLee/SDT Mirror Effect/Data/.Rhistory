datos <- read.csv(archive)          #Jalamos los datos
}
h_A <- datos$A_H       #Hits(A)
h_B <- datos$B_H     #Hits(B)
fa_A <- datos$A_FA        #FA(A)
fa_B <- datos$B_FA      #FA(B)
k <- 20                       #Participantes
s <- 160       #Ensayos con Señal
n <- 160       #Ensayos con Ruido
############################################################################
############################################################################
#Escribimos el modelo Inicial
############################################################################
write('
model{
#Posterior estimations (based on the data collected)
for (i in 1:k){
# Posterior density based on our data
h_A[i] ~ dbin(thetah_A[i],s)
fa_A[i] ~ dbin(thetaf_A[i],n)
h_B[i] ~ dbin(thetah_B[i],s)
fa_B[i] ~ dbin(thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
thetah_A[i] ~ dnorm(muHA,sdHA)
thetaf_A[i] ~ dnorm(muFA,sdFA)
thetah_B[i] ~ dnorm(muHB,sdHB)
thetaf_B[i] ~ dnorm(muFB,sdFB)
}
lamHA ~ dgamma(.001,.001)T(0.01,0.5)
lamFA ~ dgamma(.001,.001)T(0.01,0.5)
lamHB ~ dgamma(.001,.001)T(0.01,0.5)
lamFB ~ dgamma(.001,.001)T(0.01,0.5)
sdHA <- 1/sqrt(lamHA)
sdFA <- 1/sqrt(lamFA)
sdHB <-1/sqrt(lamHB)
sdFB <-1/sqrt(lamFB)
muHA <- muH + deltaH/2
muFA <- muF - deltaF/2
muHB <- muH - deltaH/2
muFB <- muF + deltaF/2
gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
deltaH <- 1/sqrt(gamdeltaH)
deltaF <- 1/sqrt(gamdeltaF)
gamuH ~ dgamma(.001,.001)T(0.5,1)
gamuF ~ dgamma(.001,.001)T(0.01,0.49)
muH <- 1/sqrt(gamuH)
muF <- 1/sqrt(gamuH)
#PRIORS
for (i in 1:k){
# Posterior density based on our data
Pr_h_A[i] ~ dbin(Pr_thetah_A[i],s)
Pr_fa_A[i] ~ dbin(Pr_thetaf_A[i],n)
Pr_h_B[i] ~ dbin(Pr_thetah_B[i],s)
Pr_fa_B[i] ~ dbin(Pr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
Pr_thetah_A[i] ~ dnorm(Pr_muHA,Pr_sdHA)
Pr_thetaf_A[i] ~ dnorm(Pr_muFA,Pr_sdFA)
Pr_thetah_B[i] ~ dnorm(Pr_muHB,Pr_sdHB)
Pr_thetaf_B[i] ~ dnorm(Pr_muFB,Pr_sdFB)
}
Pr_lamHA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamHB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_sdHA <- 1/sqrt(Pr_lamHA)
Pr_sdFA <- 1/sqrt(Pr_lamFA)
Pr_sdHB <-1/sqrt(Pr_lamHB)
Pr_sdFB <-1/sqrt(Pr_lamFB)
Pr_muHA <- Pr_muH + Pr_deltaH/2
Pr_muFA <- Pr_muF - Pr_deltaF/2
Pr_muHB <- Pr_muH - Pr_deltaH/2
Pr_muFB <- Pr_muF + Pr_deltaF/2
Pr_gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_deltaH <- 1/sqrt(Pr_gamdeltaH)
Pr_deltaF <- 1/sqrt(Pr_gamdeltaF)
Pr_gamuH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamuF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_muH <- 1/sqrt(Pr_gamuH)
Pr_muF <- 1/sqrt(Pr_gamuH)
}','Delta-Rate.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("fa_A", "fa_B", "h_B", "h_A", "s", "n", "k")                    #Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(lamHA = rep(0.25,k),lamHB = rep(0.25,k),
lamFA = rep(0.25,k),lamFB = rep(0.25,k),
gamdeltaH = 0.75,
gamdeltaF = 0.25,
gamuH = 0.75,
gamuF = 0.25))      #Valores iniciales para las extracciones de las cadenas de Markov
#Parámetros monitoreados
parameters <- c("thetah_A", "thetaf_A", "thetah_B", "thetaf_B",
"Pr_thetah_A", "Pr_thetaf_A", "Pr_thetah_B", "Pr_thetaf_B",
"muHA","muHB","muFA","muFB",
"Pr_muHA","Pr_muHB","Pr_muFA","Pr_muFB",
"deltaH","deltaF",
"Pr_deltaH","Pr_deltaF",
"muH", "muF",
"Pr_muH", "Pr_muF")
niter <- 50000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Delta-Rate.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
#########################
setwd("C:/Users/Alejandro/Desktop/afchavez19/MichaelLee/SDT Mirror Effect/Data")
rm(list=ls())
dir()
library(R2jags)
##############################################################
##############################################################
#Diferencias en Hits y Falsas Alarmas
#Modelo 1 :  Diferencias entre las Tasas H y FA (parametros TauH y TauF)
#            contra datos generados usando las priors
##############################################################
######################################################
#Especificamos el Experimento y los Datos a analizar
experimento <- 1
###################
if (experimento == 1)    #Una Figura de Ebbinghaus
{
exp <- 1
archive <-'Ex_1Ebb_TODOS.csv'         #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos del archivo
}
if (experimento == 2)   # Dos Figuras de Ebbinghaus
{
exp <- 2
archive <-'Ex_2Ebb_TODOS_Sin1.csv'  #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos
}
h_A <- datos$A_H       #Hits(A)
h_B <- datos$B_H     #Hits(B)
fa_A <- datos$A_FA        #FA(A)
fa_B <- datos$B_FA      #FA(B)
k <- 20                       #Participantes
s <- 160       #Ensayos con Señal
n <- 160       #Ensayos con Ruido
############################################################################
############################################################################
#Escribimos el modelo Inicial
############################################################################
write('
model{
#Posterior estimations (based on the data collected)
for (i in 1:k){
# Posterior density based on our data
h_A[i] ~ dbin(thetah_A[i],s)
fa_A[i] ~ dbin(thetaf_A[i],n)
h_B[i] ~ dbin(thetah_B[i],s)
fa_B[i] ~ dbin(thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
thetah_A[i] ~ dnorm(muHA,sdHA)
thetaf_A[i] ~ dnorm(muFA,sdFA)
thetah_B[i] ~ dnorm(muHB,sdHB)
thetaf_B[i] ~ dnorm(muFB,sdFB)
}
lamHA ~ dgamma(.001,.001)T(0.01,0.5)
lamFA ~ dgamma(.001,.001)T(0.01,0.5)
lamHB ~ dgamma(.001,.001)T(0.01,0.5)
lamFB ~ dgamma(.001,.001)T(0.01,0.5)
sdHA <- 1/sqrt(lamHA)
sdFA <- 1/sqrt(lamFA)
sdHB <-1/sqrt(lamHB)
sdFB <-1/sqrt(lamFB)
muHA <- muH + deltaH/2
muFA <- muF - deltaF/2
muHB <- muH - deltaH/2
muFB <- muF + deltaF/2
gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
deltaH <- 1/sqrt(gamdeltaH)
deltaF <- 1/sqrt(gamdeltaF)
gamuH ~ dgamma(.001,.001)T(0.5,1)
gamuF ~ dgamma(.001,.001)T(0.01,0.49)
muH <- 1/sqrt(gamuH)
muF <- 1/sqrt(gamuH)
#PRIORS
for (i in 1:k){
# Posterior density based on our data
Pr_h_A[i] ~ dbin(Pr_thetah_A[i],s)
Pr_fa_A[i] ~ dbin(Pr_thetaf_A[i],n)
Pr_h_B[i] ~ dbin(Pr_thetah_B[i],s)
Pr_fa_B[i] ~ dbin(Pr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
Pr_thetah_A[i] ~ dnorm(Pr_muHA,Pr_sdHA)
Pr_thetaf_A[i] ~ dnorm(Pr_muFA,Pr_sdFA)
Pr_thetah_B[i] ~ dnorm(Pr_muHB,Pr_sdHB)
Pr_thetaf_B[i] ~ dnorm(Pr_muFB,Pr_sdFB)
}
Pr_lamHA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamHB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_sdHA <- 1/sqrt(Pr_lamHA)
Pr_sdFA <- 1/sqrt(Pr_lamFA)
Pr_sdHB <-1/sqrt(Pr_lamHB)
Pr_sdFB <-1/sqrt(Pr_lamFB)
Pr_muHA <- Pr_muH + Pr_deltaH/2
Pr_muFA <- Pr_muF - Pr_deltaF/2
Pr_muHB <- Pr_muH - Pr_deltaH/2
Pr_muFB <- Pr_muF + Pr_deltaF/2
Pr_gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_deltaH <- 1/sqrt(Pr_gamdeltaH)
Pr_deltaF <- 1/sqrt(Pr_gamdeltaF)
Pr_gamuH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamuF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_muH <- 1/sqrt(Pr_gamuH)
Pr_muF <- 1/sqrt(Pr_gamuH)
}','Delta-Rate.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("fa_A", "fa_B", "h_B", "h_A", "s", "n", "k")                    #Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(lamHA = 0.25,lamHB = 0.25,
lamFA = 0.25,lamFB = 0.25,
gamdeltaH = 0.75,
gamdeltaF = 0.25,
gamuH = 0.75,
gamuF = 0.25))      #Valores iniciales para las extracciones de las cadenas de Markov
#Parámetros monitoreados
parameters <- c("thetah_A", "thetaf_A", "thetah_B", "thetaf_B",
"Pr_thetah_A", "Pr_thetaf_A", "Pr_thetah_B", "Pr_thetaf_B",
"muHA","muHB","muFA","muFB",
"Pr_muHA","Pr_muHB","Pr_muFA","Pr_muFB",
"deltaH","deltaF",
"Pr_deltaH","Pr_deltaF",
"muH", "muF",
"Pr_muH", "Pr_muF")
niter <- 50000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Delta-Rate.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
#########################
setwd("C:/Users/Alejandro/Desktop/afchavez19/MichaelLee/SDT Mirror Effect/Data")
rm(list=ls())
dir()
library(R2jags)
##############################################################
##############################################################
#Diferencias en Hits y Falsas Alarmas
#Modelo 1 :  Diferencias entre las Tasas H y FA (parametros TauH y TauF)
#            contra datos generados usando las priors
##############################################################
######################################################
#Especificamos el Experimento y los Datos a analizar
experimento <- 1
###################
if (experimento == 1)    #Una Figura de Ebbinghaus
{
exp <- 1
archive <-'Ex_1Ebb_TODOS.csv'         #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos del archivo
}
if (experimento == 2)   # Dos Figuras de Ebbinghaus
{
exp <- 2
archive <-'Ex_2Ebb_TODOS_Sin1.csv'  #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos
}
h_A <- datos$A_H       #Hits(A)
h_B <- datos$B_H     #Hits(B)
fa_A <- datos$A_FA        #FA(A)
fa_B <- datos$B_FA      #FA(B)
k <- 20                       #Participantes
s <- 160       #Ensayos con Señal
n <- 160       #Ensayos con Ruido
############################################################################
############################################################################
#Escribimos el modelo Inicial
############################################################################
write('
model{
#Posterior estimations (based on the data collected)
for (i in 1:k){
# Posterior density based on our data
h_A[i] ~ dbin(thetah_A[i],s)
fa_A[i] ~ dbin(thetaf_A[i],n)
h_B[i] ~ dbin(thetah_B[i],s)
fa_B[i] ~ dbin(thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
thetah_A[i] ~ dnorm(muHA,sdHA)
thetaf_A[i] ~ dnorm(muFA,sdFA)
thetah_B[i] ~ dnorm(muHB,sdHB)
thetaf_B[i] ~ dnorm(muFB,sdFB)
}
lamHA ~ dgamma(.001,.001)T(0.01,0.5)
lamFA ~ dgamma(.001,.001)T(0.01,0.5)
lamHB ~ dgamma(.001,.001)T(0.01,0.5)
lamFB ~ dgamma(.001,.001)T(0.01,0.5)
sdHA <- 1/sqrt(lamHA)
sdFA <- 1/sqrt(lamFA)
sdHB <-1/sqrt(lamHB)
sdFB <-1/sqrt(lamFB)
muHA <- muH + deltaH/2
muFA <- muF - deltaF/2
muHB <- muH - deltaH/2
muFB <- muF + deltaF/2
gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
deltaH <- 1/sqrt(gamdeltaH)
deltaF <- 1/sqrt(gamdeltaF)
gamuH ~ dgamma(.001,.001)T(0.5,1)
gamuF ~ dgamma(.001,.001)T(0.01,0.49)
muH <- 1/sqrt(gamuH)
muF <- 1/sqrt(gamuH)
#PRIORS
for (i in 1:k){
# Posterior density based on our data
Pr_h_A[i] ~ dbin(Pr_thetah_A[i],s)
Pr_fa_A[i] ~ dbin(Pr_thetaf_A[i],n)
Pr_h_B[i] ~ dbin(Pr_thetah_B[i],s)
Pr_fa_B[i] ~ dbin(Pr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
Pr_thetah_A[i] ~ dnorm(Pr_muHA,Pr_sdHA)
Pr_thetaf_A[i] ~ dnorm(Pr_muFA,Pr_sdFA)
Pr_thetah_B[i] ~ dnorm(Pr_muHB,Pr_sdHB)
Pr_thetaf_B[i] ~ dnorm(Pr_muFB,Pr_sdFB)
}
Pr_lamHA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamHB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_sdHA <- 1/sqrt(Pr_lamHA)
Pr_sdFA <- 1/sqrt(Pr_lamFA)
Pr_sdHB <-1/sqrt(Pr_lamHB)
Pr_sdFB <-1/sqrt(Pr_lamFB)
Pr_muHA <- Pr_muH + Pr_deltaH/2
Pr_muFA <- Pr_muF - Pr_deltaF/2
Pr_muHB <- Pr_muH - Pr_deltaH/2
Pr_muFB <- Pr_muF + Pr_deltaF/2
Pr_gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_deltaH <- 1/sqrt(Pr_gamdeltaH)
Pr_deltaF <- 1/sqrt(Pr_gamdeltaF)
Pr_gamuH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamuF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_muH <- 1/sqrt(Pr_gamuH)
Pr_muF <- 1/sqrt(Pr_gamuH)
}','Delta-Rate.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("fa_A", "fa_B", "h_B", "h_A", "s", "n", "k")                    #Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(lamHA = 0.25,lamHB = 0.25,
lamFA = 0.25,lamFB = 0.25,
gamdeltaH = 0.75,
gamdeltaF = 0.25,
gamuH = 0.75,
gamuF = 0.25))      #Valores iniciales para las extracciones de las cadenas de Markov
#Parámetros monitoreados
parameters <- c("thetah_A", "thetaf_A", "thetah_B", "thetaf_B",
"Pr_thetah_A", "Pr_thetaf_A", "Pr_thetah_B", "Pr_thetaf_B",
"muHA","muHB","muFA","muFB",
"Pr_muHA","Pr_muHB","Pr_muFA","Pr_muFB",
"deltaH","deltaF",
"Pr_deltaH","Pr_deltaF",
"muH", "muF",
"Pr_muH", "Pr_muF")
niter <- 50000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Delta-Rate.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
#########################
setwd("C:/Users/Alejandro/Desktop/afchavez19/MichaelLee/SDT Mirror Effect/Data")
rm(list=ls())
dir()
library(R2jags)
##############################################################
##############################################################
#Diferencias en Hits y Falsas Alarmas
#Modelo 1 :  Diferencias entre las Tasas H y FA (parametros TauH y TauF)
#            contra datos generados usando las priors
##############################################################
######################################################
#Especificamos el Experimento y los Datos a analizar
experimento <- 1
###################
if (experimento == 1)    #Una Figura de Ebbinghaus
{
exp <- 1
archive <-'Ex_1Ebb_TODOS.csv'         #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos del archivo
}
if (experimento == 2)   # Dos Figuras de Ebbinghaus
{
exp <- 2
archive <-'Ex_2Ebb_TODOS_Sin1.csv'  #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos
}
h_A <- datos$A_H       #Hits(A)
h_B <- datos$B_H     #Hits(B)
fa_A <- datos$A_FA        #FA(A)
fa_B <- datos$B_FA      #FA(B)
k <- 20                       #Participantes
s <- 160       #Ensayos con Señal
n <- 160       #Ensayos con Ruido
############################################################################
############################################################################
#Escribimos el modelo Inicial
############################################################################
write('
model{
#Posterior estimations (based on the data collected)
for (i in 1:k){
# Posterior density based on our data
h_A[i] ~ dbin(thetah_A[i],s)
fa_A[i] ~ dbin(thetaf_A[i],n)
h_B[i] ~ dbin(thetah_B[i],s)
fa_B[i] ~ dbin(thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
thetah_A[i] ~ dnorm(muHA,sdHA)
thetaf_A[i] ~ dnorm(muFA,sdFA)
thetah_B[i] ~ dnorm(muHB,sdHB)
thetaf_B[i] ~ dnorm(muFB,sdFB)
}
lamHA ~ dgamma(.001,.001)T(0.01,0.5)
lamFA ~ dgamma(.001,.001)T(0.01,0.5)
lamHB ~ dgamma(.001,.001)T(0.01,0.5)
lamFB ~ dgamma(.001,.001)T(0.01,0.5)
sdHA <- 1/sqrt(lamHA)
sdFA <- 1/sqrt(lamFA)
sdHB <-1/sqrt(lamHB)
sdFB <-1/sqrt(lamFB)
muHA <- muH + deltaH/2
muFA <- muF - deltaF/2
muHB <- muH - deltaH/2
muFB <- muF + deltaF/2
gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
deltaH <- 1/sqrt(gamdeltaH)
deltaF <- 1/sqrt(gamdeltaF)
gamuH ~ dgamma(.001,.001)T(0.5,1)
gamuF ~ dgamma(.001,.001)T(0.01,0.49)
muH <- 1/sqrt(gamuH)
muF <- 1/sqrt(gamuH)
#PRIORS
for (i in 1:k){
# Posterior density based on our data
Pr_h_A[i] ~ dbin(Pr_thetah_A[i],s)
Pr_fa_A[i] ~ dbin(Pr_thetaf_A[i],n)
Pr_h_B[i] ~ dbin(Pr_thetah_B[i],s)
Pr_fa_B[i] ~ dbin(Pr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
Pr_thetah_A[i] ~ dnorm(Pr_muHA,Pr_sdHA)
Pr_thetaf_A[i] ~ dnorm(Pr_muFA,Pr_sdFA)
Pr_thetah_B[i] ~ dnorm(Pr_muHB,Pr_sdHB)
Pr_thetaf_B[i] ~ dnorm(Pr_muFB,Pr_sdFB)
}
Pr_lamHA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFA ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamHB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_lamFB ~ dgamma(.001,.001)T(0.01,0.5)
Pr_sdHA <- 1/sqrt(Pr_lamHA)
Pr_sdFA <- 1/sqrt(Pr_lamFA)
Pr_sdHB <-1/sqrt(Pr_lamHB)
Pr_sdFB <-1/sqrt(Pr_lamFB)
Pr_muHA <- Pr_muH + Pr_deltaH/2
Pr_muFA <- Pr_muF - Pr_deltaF/2
Pr_muHB <- Pr_muH - Pr_deltaH/2
Pr_muFB <- Pr_muF + Pr_deltaF/2
Pr_gamdeltaH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamdeltaF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_deltaH <- 1/sqrt(Pr_gamdeltaH)
Pr_deltaF <- 1/sqrt(Pr_gamdeltaF)
Pr_gamuH ~ dgamma(.001,.001)T(0.5,1)
Pr_gamuF ~ dgamma(.001,.001)T(0.01,0.49)
Pr_muH <- 1/sqrt(Pr_gamuH)
Pr_muF <- 1/sqrt(Pr_gamuH)
}','Delta-Rate.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("fa_A", "fa_B", "h_B", "h_A", "s", "n", "k")                    #Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(lamHA = 0.25,lamHB = 0.25,
lamFA = 0.25,lamFB = 0.25,
gamdeltaH = 0.75,
gamdeltaF = 0.25,
gamuH = 0.75,
gamuF = 0.25))      #Valores iniciales para las extracciones de las cadenas de Markov
#Parámetros monitoreados
parameters <- c("thetah_A", "thetaf_A", "thetah_B", "thetaf_B",
"Pr_thetah_A", "Pr_thetaf_A", "Pr_thetah_B", "Pr_thetaf_B",
"muHA","muHB","muFA","muFB",
"Pr_muHA","Pr_muHB","Pr_muFA","Pr_muFB",
"deltaH","deltaF",
"Pr_deltaH","Pr_deltaF",
"muH", "muF",
"Pr_muH", "Pr_muF")
niter <- 50000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Delta-Rate.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
#########################
