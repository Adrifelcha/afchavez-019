var.x<-var(datos.TCT$x) # desviación estándar de la puntuación observada
var.t<-var(datos.TCT$t) # desviación estándar de la puntuación verdadera
var.e<-var(datos.TCT$e) # desviación estándar de la puntuación error
plot(datos.TCT$x, datos.TCT$t, main="Diagrama de dispersión", xlab="Puntuación observada (X)",
ylab="Puntuación verdadera (T)");
cor(datos.TCT$x, datos.TCT$t) # plot y correlación entre puntuación observada y puntuación verdadera
abline(-0.0795, 0.9469, col = "red", lwd = 2)
plot(datos.TCT$x, datos.TCT$t, main="Diagrama de dispersión", xlab="Puntuación observada (X)",
ylab="Puntuación verdadera (T)");
cor(datos.TCT$x, datos.TCT$t) # plot y correlación entre puntuación observada y puntuación verdadera
abline(-0.0795, 0.9469, col = "red", lwd = 2)
mtext(bquote( T == .(0.9469) * X - .(0.0795)), side=1, line=4)
plot(datos.TCT$x, datos.TCT$e, main="Diagrama de dispersión", xlab="Puntuación observada (X)",
ylab="Puntuación error (E)"); cor(datos.TCT$x, datos.TCT$e) # plot y correlación entre puntuación observada y puntuación error
plot(datos.TCT$t, datos.TCT$e, main="Diagrama de dispersión", xlab="Puntuación verdadera (T)",
ylab="Puntuación error (E)"); cov(datos.TCT$t, datos.TCT$e) # plot y covarianza entre puntuación verdadera y puntuación error
# Regresión lineal
lm(formula = datos.TCT$t ~ datos.TCT$x, data = datos.TCT)
a <- (var(datos.TCT$t)/var(datos.TCT$x)); a
b <- (1-a)*mean(datos.TCT$x); b
estima.diopt.ver <- a*(-3.5) + b; estima.diopt.ver
estima.diopt.ver <- a*(-8.5) + b; estima.diopt.ver
estima.diopt.ver <- a*(-10.5) + b; estima.diopt.ver
estima.diopt.ver <- a*(-0.5) + b; estima.diopt.ver
estima.diopt.ver <- a*(-1.5) + b; estima.diopt.ver
estima.diopt.ver <- a*(-1.75) + b; estima.diopt.ver
estima.diopt.ver <- a*(-1.25) + b; estima.diopt.ver
estima.diopt.ver <- a*(-1.5) + b; estima.diopt.ver
simular <- function(valor_esperado_t, varianza_t, varianza_e, n_personas){
beta <- -valor_esperado_t/varianza_t
alpha <- -valor_esperado_t*beta
t <- round(-0.50 - rgamma(n = n_personas, shape = alpha, rate = beta), digits = 4)
e <- rnorm(n = n_personas, mean = 0, sd = sqrt(varianza_e))
x <- round(4*(t + e), digits = 0) / 4
x[x > -0.25] <- -0.25
e = x - t;
as.data.frame(cbind(x, t, e))
}
set.seed(70368)
datos.TCT <- simular(valor_esperado_t = -1, varianza_t = 0.8, varianza_e = 0.04, n_personas = 100000)
library(plyr)
tab.X <-(count(datos.TCT$x)); tab.X
library(mirt)
theta <- seq(-3, 3, .1)
bmedium <- 0
amoderate <- 1
P <- 1 / (1 + exp(-amoderate * (theta - bmedium)))
plot(theta, P)
plot(theta, P, type="l")
help("plot")
?plot
par(lab=c(10,10,2000)) #Asigna en los par?metros la separación que tendrán (eje x, eje y, extra) (x, y, len)
theta <- seq(-3, 3, .1)
b <- 0
a <- 1
P <- 1 / (1 + exp(-a * (theta - b)))
plot(theta, P, type="o", xlim=c(-3,3), ylim=c(0,1),  # type="l"
xlab=expression(paste("Habilidad, ",theta)),
ylab=expression(paste("Probabilidad de responder correctamente, P (",theta,")")))
par(lab=c(10,10,1))
theta <- seq(-3, 3, .1)
b <- 0
a <- 1
P <- 1 / (1 + exp(-a * (theta - b)))
plot(theta, P, type="o", xlim=c(-3,3), ylim=c(0,1),
main="Figura 1. Curva característica de un item con dificultad media
y discriminación moderada",
# sub="Ver Baker y Kim (2016).",
xlab=expression(paste("Habilidad, ",theta)),
ylab=expression(paste("Probabilidad de responder correctamente, P (",theta,")")))
iccplot <- function(b) {
par(lab=c(7,3,3))
theta <- seq(-7, 7, .1)
P <- 1 / (1 + exp(-1 * (theta - b)))
plot(theta, P, type="l", xlim=c(-7,7), ylim=c(0,1),
xlab=expression(paste("Habilidad, ",theta)),
ylab=expression(paste("Probabilidad de responder correctamente, P (",theta,")")))
}
iccplot(0)
iccplot(b=0) # Si cambian los valores de los parámetros a y b se modifica la forma general de la figura
#Dificultades
bmuyfacil <- -2.625
bfacil <- -1.5
bmedia <- 0
bdificil <- 1.5
bmuydificil <- 2.625
iccplot(bmedia)
par(new=T)
iccplot(bfacil)
par(new=T)
iccplot(bdificil)
par(new=T)
iccplot(bmuyfacil)
par(new=T)
iccplot(bmuydificil)
theta <- seq(-3, 3, .1)
theta
bmedium <- 0
bmedium <- 0
#amoderate <- 1
P <- 1 / (1 + exp(-(theta - bmedium)))
plot(theta, P)
plot(theta, P)
plot(theta, P, type="l")
par(lab=c(10,10,2000)) #Asigna en los par?metros la separación que tendrán (eje x, eje y, extra) (x, y, len)
theta <- seq(-3, 3, .1)
b <- 0
P <- 1 / (1 + exp(-(theta - b)))
plot(theta, P, type="o", xlim=c(-3,3), ylim=c(0,1),  # type="l"
xlab=expression(paste("Habilidad, ",theta)),
ylab=expression(paste("Probabilidad de responder correctamente, P (",theta,")")))
par(lab=c(10,10,1))
theta <- seq(-3, 3, .1)
b <- 0
P <- 1 / (1 + exp(-(theta - b)))
plot(theta, P, type="o", xlim=c(-3,3), ylim=c(0,1),
main="Figura 1. Curva característica de un item con dificultad media
y discriminación moderada",
# sub="Ver Baker y Kim (2016).",
xlab=expression(paste("Habilidad, ",theta)),
ylab=expression(paste("Probabilidad de responder correctamente, P (",theta,")")))
iccplot <- function(b) {
par(lab=c(7,3,3))
theta <- seq(-7, 7, .1)
P <- 1 / (1 + exp(-1 * (theta - b)))
plot(theta, P, type="l", xlim=c(-7,7), ylim=c(0,1),
xlab=expression(paste("Habilidad, ",theta)),
ylab=expression(paste("Probabilidad de responder correctamente, P (",theta,")")))
}
iccplot(0)
iccplot(b=0) # Si cambian los valores de los parámetros a y b se modifica la forma general de la figura
#Dificultades
bmuyfacil <- -2.625
bfacil <- -1.5
bmedia <- 0
bdificil <- 1.5
bmuydificil <- 2.625
iccplot(bmedia)
par(new=T)
par(new=T)
iccplot(bfacil)
par(new=T)
iccplot(bdificil)
par(new=T)
iccplot(bmuyfacil)
par(new=T)
iccplot(bmuydificil)
library(devtools)
install_github("cddesja/hemp")
library(hemp)
onepl_mod <- "F = 1 - 16
CONSTRAIN = (1 - 16, a1)"
onepl_fit <- mirt(data = SAPA, model = onepl_mod, SE = TRUE)
onepl_params <- coef(onepl_fit, IRTpars = TRUE, simplify = TRUE)
onepl_params <- coef(onepl_fit, IRTpars = TRUE, simplify = TRUE); onepl_params
# Rasch Model
rasch_mod <- "F = 1 - 16"
rasch_fit <- mirt(data = SAPA, model = rasch_mod,
itemtype = "Rasch", SE = TRUE, IRTpars = T, simplify=TRUE)
rasch_fit <- mirt(data = SAPA, model = rasch_mod,
itemtype = "Rasch", SE = TRUE)
rasch_params <- coef(rasch_fit, IRTpars = TRUE, simplify = TRUE)
rasch_items <- rasch_params$items
head(rasch_items)
?SAPA
data(SAPA)
library(psych)
describe(SAPA)
write.csv(SAPA, "SAPA.csv")
xbar=374
n = 27
mu = 400
var = 115
z<-(xbar-mu)/(var/sqrt(n)); z
dnorm(-1.174782)
xbar=374
n<-27
mu<-320
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
xbar=374
n<-27
mu<-350
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
mu<-335
z<-(xbar-mu)/(var/sqrt(n)); z
xbar=374
mu<-345
z<-(xbar-mu)/(var/sqrt(n)); z
z<-(xbar-mu)/(var/sqrt(n)); z
xbar=374
n<-27
mu<-355
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
xbar=374
n<-27
mu<-355
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
pnorm(0.8584947) #se obtiene el valor de la probabilidad.
dnorm(-1.174782)
xbar=374
n<-27
mu<-455
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
xbar=374
n<-27
mu<-415
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
## [1] 0.8584947
xbar=374
n<-27
mu<-435
var<-115
z<-(xbar-mu)/(var/sqrt(n)); z
pnorm(-2.75622) #se obtiene el valor de la probabilidad.
rm(list=ls())
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
###################
#Calcula para cada item el indice de dificultad (p) en el marco de la Teoria Clasica de los Tests (TCT).
items <- c(1:12)                                           #Número de ítems
p <- NA                                                    #dificultad p en TCT
b <- NA                                                    #dificultad b en TRI
for(a in 1:length(items)){                                 #Se calcula p de todos los items
p[a] <- mean(datos[,2+a])
}
rm(list=ls())
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
####################################################################################################################################################
#1. Realiza los siguientes analisis:
#Calcula para cada item el indice de dificultad (p) en el marco de la Teoria Clasica de los Tests (TCT).
items <- c(1:12)                                           #Número de ítems
p <- NA                                                    #dificultad p en TCT
b <- NA                                                    #dificultad b en TRI
for(a in 1:length(items)){                                 #Se calcula p de todos los items
p[a] <- mean(datos[,2+a])
}
#Ajusta el modelo de Rasch a los datos para obtener estimaciones de los parametros de difcultad (b) de los items.
write.csv(datos[,3:14], "datostri.csv", row.names = FALSE)
datostri <- read.csv("datostri.csv")                       #datostri es un csv solo con 1s y 0s
library(mirt)                                              #libreria para hacer irt
rasch <- mirt(datostri, 1, itemtype = 'Rasch')             #esto es tal cual lo tenias tu, no he revisado a fondo la funcion para saber que hiciste
rep_coef<-data.frame(coef(rasch, simplify=TRUE)$items)
b<- -1*(rep_coef$d/rep_coef$a1)
rep<-cbind(rep_coef,b)
rep <- subset(rep, select=5); round(rep,3)                 #obtenemos b para todos los items
#(a) Organiza los resultados de los analisis anteriores en una tabla que permite una comparacion directa entre los indices de dificultad de la TCT
#    y los parametros de dificultad en el modelo de Rasch.
comparacion <- matrix(data=c(p,b),nrow=12,ncol=2)          #creamos una matriz con p en una columna y b en otra
#(b) Explica como se interpretan los indices p de la TCT.
#    R: Es la proporcion de personas que respondieron correctamente. Se interpreta como la probabilidad de que el item sea contestado correctamente
#       por la muestra. Valores más cercanos a 1 indican que el ítem es más fácil, y cercanos a 0 que es más difícil.
#(c) Para el modelo de Rasch, interpreta:
#    i. la dimension latente que subyace a las respuestas;
#    R: la aceptabilidad de "explotar" animales para diversos usos, o la afinidad hacia actitudes opuestas al veganismo
#    ii. los parametros b de los items.
#    R: la cantidad o medida de la dimension latente que debe tener una persona para tener una probabilidad de .5 de responder afirmativamente al item.
#       Mientras mayor es el el valor de b, más se requiere del atributo/rasgo latente, es decir, más dificil es el ítem.
#(d) En terminos generales, ¿que relacion existe entre los indices p y los paraametros b de ambos enfoques?
#    R: ambos indican que tan dificil es un ítem en función de la probabilidad de responderlo correctamente. Valores de p mas grandes se corresponden
#       con valores de b mas pequeños, y viceversa.
#####################################################################################################################################################
#2. En la pregunta anterior, se analizaron los datos para obtener informacion sobre los items. En esta pregunta, realiza los siguientes analisis para
#obtener informacion para cada uno de los participantes:
#Calcula para cada persona su puntuacion (X) en el marco de la Teoria Claasica de los Tests (es decir, el numero de veces que responde
#"Sí es aceptable" en las 12 preguntas).
x <- NA                                                    #Puntuacion x en TCT
personas <- nrow(datos)
for(a in 1:personas){
x[a] <- sum(datos[a,2+items])
}
#Obten estimaciones para los parametros (theta) de las personas en el modelo de Rasch.
theta <- fscores(rasch, method='WLE')                      #fscores nos permite calcular theta para cada persona, a partir de los datos que ya
#habíamos estimado previamente con mirt y guardado en rasch
#WLE es el método, hay varios, esta info viene en el código 07 de Ramsés, desde la linea 46
#Ahora, responde las siguientes preguntas:
#(a) Representa las variables x y theta graficamente a traves de un diagrama de puntos. Describe, con base en esta grafica, la relacion entre
#    las variables x y theta.
plot(x,theta)                                              #seguro puedes enchular la gráfica
rm(list=ls())
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
####################################################################################################################################################
#1. Realiza los siguientes analisis:
#Calcula para cada item el indice de dificultad (p) en el marco de la Teoria Clasica de los Tests (TCT).
items <- c(1:12)                                           #Número de ítems
p <- NA                                                    #dificultad p en TCT
b <- NA                                                    #dificultad b en TRI
for(a in 1:length(items)){                                 #Se calcula p de todos los items
p[a] <- mean(datos[,2+a])
}
#Ajusta el modelo de Rasch a los datos para obtener estimaciones de los parametros de difcultad (b) de los items.
write.csv(datos[,3:14], "datostri.csv", row.names = FALSE)
datostri <- read.csv("datostri.csv")                       #datostri es un csv solo con 1s y 0s
library(mirt)                                              #libreria para hacer irt
rasch <- mirt(datostri, 1, itemtype = 'Rasch')             #esto es tal cual lo tenias tu, no he revisado a fondo la funcion para saber que hiciste
rep_coef<-data.frame(coef(rasch, simplify=TRUE)$items)
b<- -1*(rep_coef$d/rep_coef$a1)
rep<-cbind(rep_coef,b)
rep <- subset(rep, select=5); round(rep,3)                 #obtenemos b para todos los items
#(a) Organiza los resultados de los analisis anteriores en una tabla que permite una comparacion directa entre los indices de dificultad de la TCT
#    y los parametros de dificultad en el modelo de Rasch.
comparacion <- matrix(data=c(p,b),nrow=12,ncol=2)          #creamos una matriz con p en una columna y b en otra
#(b) Explica como se interpretan los indices p de la TCT.
#    R: Es la proporcion de personas que respondieron correctamente. Se interpreta como la probabilidad de que el item sea contestado correctamente
#       por la muestra. Valores más cercanos a 1 indican que el ítem es más fácil, y cercanos a 0 que es más difícil.
#(c) Para el modelo de Rasch, interpreta:
#    i. la dimension latente que subyace a las respuestas;
#    R: la aceptabilidad de "explotar" animales para diversos usos, o la afinidad hacia actitudes opuestas al veganismo
#    ii. los parametros b de los items.
#    R: la cantidad o medida de la dimension latente que debe tener una persona para tener una probabilidad de .5 de responder afirmativamente al item.
#       Mientras mayor es el el valor de b, más se requiere del atributo/rasgo latente, es decir, más dificil es el ítem.
#(d) En terminos generales, ¿que relacion existe entre los indices p y los paraametros b de ambos enfoques?
#    R: ambos indican que tan dificil es un ítem en función de la probabilidad de responderlo correctamente. Valores de p mas grandes se corresponden
#       con valores de b mas pequeños, y viceversa.
#####################################################################################################################################################
#2. En la pregunta anterior, se analizaron los datos para obtener informacion sobre los items. En esta pregunta, realiza los siguientes analisis para
#obtener informacion para cada uno de los participantes:
#Calcula para cada persona su puntuacion (X) en el marco de la Teoria Claasica de los Tests (es decir, el numero de veces que responde
#"Sí es aceptable" en las 12 preguntas).
x <- NA                                                    #Puntuacion x en TCT
personas <- nrow(datos)
for(a in 1:personas){
x[a] <- sum(datos[a,2+items])
}
#Obten estimaciones para los parametros (theta) de las personas en el modelo de Rasch.
theta <- fscores(rasch, method='WLE')                      #fscores nos permite calcular theta para cada persona, a partir de los datos que ya
#habíamos estimado previamente con mirt y guardado en rasch
#WLE es el método, hay varios, esta info viene en el código 07 de Ramsés, desde la linea 46
#Ahora, responde las siguientes preguntas:
#(a) Representa las variables x y theta graficamente a traves de un diagrama de puntos. Describe, con base en esta grafica, la relacion entre
#    las variables x y theta.
plot(x,theta)                                              #seguro puedes enchular la gráfica
#(c) ¿Los datos dan evidencia de una diferencia global entre hombres y mujeres respecto de su actitud hacia el veganismo? Justifica tu respuesta.
sexo <- matrix(data=c(datos$Sexo,theta),nrow=length(datos[,1]),ncol=2) #creamos una matriz con el sexo de las personas y su theta
dif_sexo <- t.test(sexo[,2]~sexo[,1])                                  #realizamos una prueba t para ver si hay diferencia en funcion del sexo
dif_sexo                                                               #hay diferencia estadísticamente significativa entre las medias
#(c) ¿Los datos dan evidencia de una diferencia global entre hombres y mujeres respecto de su actitud hacia el veganismo? Justifica tu respuesta.
sexo <- matrix(data=c(datos$Sexo,theta),nrow=length(datos[,1]),ncol=2) #creamos una matriz con el sexo de las personas y su theta
dif_sexo <- t.test(sexo[,2]~sexo[,1])                                  #realizamos una prueba t para ver si hay diferencia en funcion del sexo
dif_sexo                                                               #hay diferencia estadísticamente significativa entre las medias
sexo
library(psych)                                                         #librería que ya contiene una función para calcular alfa de cronbach
alfa <- alpha(datostri)                                                #usamos la función en los datos solos (EN ESTO TENGO DUDA)
alfa                                                                   #alfa de cronbach vale 0.70
theta_r <- matrix(seq(-6,6,.01))                                       #el rango de theta sobre el que queremos conocer la funcion de información
info <- testinfo(rasch, theta_r)                                       #testinfo es la función para obtener la funcion de informacion
todos los items. En general la formula de la funcion de información es: sumatoria [(theta_p)(1-theta_p)]
plot(theta_r, info, type = 'l', main = 'Información del test',           #graficamos la funcion, mientras mas estrecha, mas precisas son las
xlab=expression(paste("Habilidad, ",theta_r)),                      #estimaciones
ylab=expression(paste("Información")))
todos los items. En general la formula de la funcion de información es: sumatoria [(theta_p)(1-theta_p)]
plot(theta_r, info, type = 'l', main = 'Información del test',           #graficamos la funcion, mientras mas estrecha, mas precisas son las
xlab=expression(paste("Habilidad, ",theta_r)),                      #estimaciones
ylab=expression(paste("Información")))
#############################################################
# Tarea 1 : TCT vs TRI
#############################################################
rm(list=ls())                       #Limpiamos variables
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
#############################################################
Datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
###################################################
###################################################
############## PARTE I
############## Beta (IRT) vs Dificultad p (TTC)
###################################################
P <- NULL
Items <- c(1:12)
for(a in 1:length(Items)){
P[a] <- mean(Datos[,2+a])
}
#############################################################
# Tarea 1 : TCT vs TRI
#############################################################
rm(list=ls())                       #Limpiamos variables
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
#############################################################
Datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
Datos$Id <- NULL
Datos$Sexo <- NULL
Datos$X <- NULL
write.csv(Datos, "JustData.csv", row.names = FALSE)
Datos <- read.csv("JustData.csv")
############
Datos
mean(DAtos[1,])
mean(Datos[1,])
Datos[1,]
Datos[2,]
Datos[,1]
#############################################################
# Tarea 1 : TCT vs TRI
#############################################################
rm(list=ls())                       #Limpiamos variables
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
#############################################################
Datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
Datos$Id <- NULL
Datos$Sexo <- NULL
Datos$X <- NULL
write.csv(Datos, "JustData.csv", row.names = FALSE)
Datos <- read.csv("JustData.csv")
###################################################
###################################################
############## PARTE I
############## Beta (IRT) vs Dificultad p (TTC)
###################################################
P <- NULL
Items <- c(1:12)
for(a in 1:length(Items)){
P[a] <- mean(Datos[,a])
}
P
#############################################################
# Tarea 1 : TCT vs TRI
#############################################################
rm(list=ls())                       #Limpiamos variables
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
#############################################################
Datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
###################################################
###################################################
############## PARTE I
############## Beta (IRT) vs Dificultad p (TTC)
###################################################
P <- NULL
Items <- c(1:12)
for(a in 1:length(Items)){
P[a] <- mean(Datos[,2+a])
}
Datos$Id <- NULL
Datos$Sexo <- NULL
Datos$X <- NULL
write.csv(Datos, "JustData.csv", row.names = FALSE)
OnlyData <- read.csv("JustData.csv")
library(mirt)
Rasch <- mirt(OnlyData, 1, itemtype = 'Rasch')
rep_coef<-data.frame(coef(Rasch, simplify=TRUE)$items)
b<- -1*(rep_coef$d/rep_coef$a1)
rep<-cbind(rep_coef,b)
rep <- subset(rep, select=5); round(rep,3)
#############################################################
# Tarea 1 : TCT vs TRI
#############################################################
rm(list=ls())                       #Limpiamos variables
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
#############################################################
Datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
###################################################
###################################################
############## PARTE I
############## Beta (IRT) vs Dificultad p (TTC)
###################################################
P <- NULL
Items <- c(1:12)
for(a in 1:length(Items)){
P[a] <- mean(Datos[,2+a])
}
Datos$Id <- NULL
Datos$Sexo <- NULL
Datos$X <- NULL
write.csv(Datos, "JustData.csv", row.names = FALSE)
OnlyData <- read.csv("JustData.csv")
library(mirt)
Rasch <- mirt(OnlyData, 1, itemtype = 'Rasch')
rep_coef<-data.frame(coef(Rasch, simplify=TRUE)$items)
b<- -1*(rep_coef$d/rep_coef$a1)
rep<-cbind(rep_coef,b)
rep <- subset(rep, select=5); round(rep,3)
matrix(data=c(P,b),nrow=12,ncol=2)
#############################################################
# Tarea 1 : TCT vs TRI
#############################################################
rm(list=ls())                       #Limpiamos variables
setwd("D:/afchavez/Desktop/Adrifelcha_PsicometriaYEvaluacion/Curso_Ram&Irwin/Tareas/Tarea1_IRTvsTCT")
#############################################################
Datos <- read.csv("Tarea1_Datos.csv")    #Datos a trabajar
###################################################
###################################################
############## PARTE I
############## Beta (IRT) vs Dificultad p (TTC)
###################################################
P <- NULL
Items <- c(1:12)
for(a in 1:length(Items)){
P[a] <- mean(Datos[,2+a])
}
Datos$Id <- NULL
Datos$Sexo <- NULL
Datos$X <- NULL
write.csv(Datos, "JustData.csv", row.names = FALSE)
OnlyData <- read.csv("JustData.csv")
library(mirt)
Rasch <- mirt(OnlyData, 1, itemtype = 'Rasch')
rep_coef<-data.frame(coef(Rasch, simplify=TRUE)$items)
b<- -1*(rep_coef$d/rep_coef$a1)
rep<-cbind(rep_coef,b)
rep <- subset(rep, select=5); round(rep,3)
matrix(data=c(P,round(b, 3)),nrow=12,ncol=2)
matrix(data=c(P,round(b, 3)),nrow=12,ncol=2)
matrix(data=c(P,round(b, 3)),ncol=2)
matrix(data=c(P,round(b, 3)),ncol=2)
Comparacion <- matrix(data=c(P,round(b, 3)),ncol=2)
colnames(Comparacion) <- c("p", "Beta")
Comparacion
