}
alumnos <- c("Mariana", "Viridiana", "Sergio", "Laura", "Guadalupe", "Chester", "Agustín")
semana_1 <- c(135, 125, 118, 110, 108, 106, 100)
semana_2 <- c(131, 130, 125, 112, 110, 105, 101)
plot(semana_1,semana_2, pch=15, xlim= c(100,135), ylim=c(100,135), col="black", cex=2)
lines(c(0,140),c(0,140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(semana_1[i], semana_2[i]+1, paste(alumnos[i]), cex=1.2)
}
alumnos <- c("Mariana", "Viridiana", "Sergio", "Laura", "Guadalupe", "Chester", "Agustín")
semana_1 <- c(135, 125, 118, 110, 108, 106, 100)
semana_2 <- c(131, 130, 125, 112, 110, 105, 101)
plot(semana_1,semana_2, pch=15, xlim= c(100,135), ylim=c(100,135), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,140),c(0,140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(semana_1[i], semana_2[i]+1, paste(alumnos[i]), cex=1.2)
}
source('C:/Users/Alejandro/Desktop/afchavez19/JeanPiaget/Presentaciones/Codigos/09_Correlaciones.R', echo=TRUE)
plot(semana_1,semana_1)
source('C:/Users/Alejandro/Desktop/afchavez19/JeanPiaget/Presentaciones/Codigos/09_Correlaciones.R', echo=TRUE)
alumnos <- c("Mariana", "Viridiana", "Sergio", "Laura", "Guadalupe", "Chester", "Agustín")
semana_1 <- c(135, 125, 118, 110, 108, 106, 100)
semana_2 <- c(131, 130, 125, 112, 110, 105, 101)
plot(semana_1,semana_2, pch=15, xlim= c(100,135), ylim=c(100,135), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,140),c(0,140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(semana_1[i], semana_2[i]+1, paste(alumnos[i]), cex=1.2)
}
plot(semana_1,semana_1, pch=15, xlim= c(100,135), ylim=c(100,135), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,140),c(0,140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(semana_1[i], semana_2[i]+1, paste(alumnos[i]), cex=1.2)
}
alumnos <- c("Mariana", "Viridiana", "Sergio", "Laura", "Guadalupe", "Chester", "Agustín")
semana_1 <- c(135, 125, 118, 110, 108, 106, 100)
semana_2 <- c(131, 130, 125, 112, 110, 105, 101)
plot(semana_1,semana_2, pch=15, xlim= c(100,135), ylim=c(100,135), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,140),c(0,140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(semana_1[i], semana_2[i]+1, paste(alumnos[i]), cex=1.2)
}
plot(semana_1,semana_1, pch=15, xlim= c(100,135), ylim=c(100,135), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,140),c(0,140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(semana_1[i], semana_1[i]+1, paste(alumnos[i]), cex=1.2)
}
source('C:/Users/Alejandro/Desktop/afchavez19/JeanPiaget/Presentaciones/Codigos/09_Correlaciones.R', echo=TRUE)
#Correlación perfecta negativa
plot(-(semana_1),-(semana_1), pch=15, xlim= c(-135,-100), ylim=c(-135,-100), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,-140),c(0,-140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(-(semana_1[i]), -(semana_1[i]-1), paste(alumnos[i]), cex=1.2)
}
#Correlación perfecta negativa
plot(-(semana_1),-(semana_1), pch=15, xlim= c(-135,-100), ylim=c(-135,-100), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,-140),c(0,-140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(-(semana_1[i]), -(semana_1[i]-1), paste(alumnos[i]), cex=1.2)
}
#Correlación perfecta negativa
plot(-(semana_1),-(semana_1), pch=15, xlim= c(-135,-100), ylim=c(-135,-100), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,-140),c(0,-140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(-(semana_1[i]), -(semana_1[i]-1), paste(alumnos[i]), cex=1.2)
}
#Correlación perfecta negativa
plot((semana_1),-(semana_1), pch=15, xlim= c(-135,-100), ylim=c(-135,-100), col="black", cex=2,
xlab="Semana 1", ylab="Semana 2")
lines(c(0,-140),c(0,-140),col='black', lty=4,lwd=2)
for(i in 1:6){
text(-(semana_1[i]), -(semana_1[i]-1), paste(alumnos[i]), cex=1.2)
}
y <- rep(0,6)
plot(semana_1,y)
y <- c(0,0,0,0,0,0)
plot(semana_1,y)
length(semana_1)
y <- c(0,0,0,0,0,0,0)
plot(semana_1,y)
y <- rep(0,7)
plot(semana_1,y)
y
y <- rep(0,7)
plot(semana_1,y)
y <- rep(120,7)
plot(semana_1,y)
y <- rep(120,7)
x <- rnorm(60,5,7)
plot(semana_1,y)
y <- rep(120,7)
x <- rnorm(60,5,7)
plot(x,y)
x
y <- rep(120,7)
x <- rnorm(7,60,5)
plot(x,y)
y <- rep(120,7)
x <- rnorm(7,60,5)
plot(x,y, pch=15)
y <- rep(120,7)
x <- rnorm(7,60,5)
plot(x,y, pch=15, cex=2)
y <- rep(120,7)
x <- rnorm(7,60,5)
plot(x,y, pch=15, cex=2, xlab="Peso", ylab="Prueba de inteligencia")
y <- rep(120,7)
x <- rnorm(7,60,5)
plot(x,y, pch=15, cex=2, xlab="Peso", ylab="Prueba de inteligencia")
lines(c(0,100),(120,120), col="black", lty=4, lwd=2)
y <- rep(120,7)
x <- rnorm(7,60,5)
plot(x,y, pch=15, cex=2, xlab="Peso", ylab="Prueba de inteligencia")
lines(c(0,100),c(120,120), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Peso", ylab="Prueba de inteligencia")
lines(c(0,100),c(120,120), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Peso", ylab="Prueba de inteligencia")
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", cex=2)
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", lab.cex=2)
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", lab.cex=3)
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", cex.lab=2)
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", cex.lab=1..5)
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", cex.lab=1.5)
lines(c(0,16),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", cex.lab=1.5)
lines(c(2,14),c(14,0), col="black", lty=4, lwd=2)
#Correlación perfecta positiva
x <- c(2,4,6,8,10,12,14)
y <- rev(x)
plot(x,y, pch=15, cex=2, xlab="Prueba de felicidad", ylab="Prueba de depresión", cex.lab=1.5)
lines(c(2,14),c(14,2), col="black", lty=4, lwd=2)
rm(list=ls())
library(psych)
setwd("C:/Users/Alejandro/Desktop/afchavez19/RIMEDIE/Mat09_2015")
Respuestas <- read.csv("PLANEA.09.2015_IDENT_ITEMS.csv")
Respuestas[,1:12] <- NULL
Eje1 <- c(c(1:10),c(26:35))           #Items en el Eje 1: SNPA
Eje2 <- c(c(19:25),43,c(45:50))       #Items en el Eje 2: MI
Eje3 <- c(c(11:18),c(36:42),44)       #Items en el Eje 3: FEM
R_E1 <- Respuestas[,Eje1]
R_E2 <- Respuestas[,Eje2]
R_E3 <- Respuestas[,Eje3]
#Eliminamos los casos con datos faltantes
Datos <- Respuestas[complete.cases(Respuestas),]
D_E1 <- R_E1[complete.cases(R_E1),]
D_E2 <- R_E2[complete.cases(R_E2),]
D_E3 <- R_E3[complete.cases(R_E3),]
################################################################
################################################################
########################   I N D I C E S    D E     L A     TCT
#Distribución de puntajes totales alcanzados
Total <- NULL
for(i in 1:nrow(Datos)){
Total[i] <- sum(Datos[i,])
}
min(Total)
max(Total)
hist(Total, breaks = seq(0,50,1), axes=F, main="Distribución de Puntaje Total en la muestra", col="goldenrod3",
xlab="Puntaje total",ylab="Frecuencia (No. de sustentantes)", cex.lab=1.3, ylim=c(0,1000),
panel.first =
c(lines(c(0,1),c(1,1),lwd=2,lty=3, col="black"),lines(c(0,1),c(0.05,0.05),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.1,.1),lwd=2,lty=3, col="black"),lines(c(0,1),c(.15,.15),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.2,.2),lwd=2,lty=3, col="black"),lines(c(0,1),c(.25,.25),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.3,.3),lwd=2,lty=3, col="black"),lines(c(0,1),c(.35,.35),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.4,.4),lwd=2,lty=3, col="black"),lines(c(0,1),c(.45,.45),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.5,.5),lwd=2,lty=3, col="black"),lines(c(0,1),c(.55,.55),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.6,.6),lwd=2,lty=3, col="black"),lines(c(0,1),c(.65,.65),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.7,.7),lwd=2,lty=3, col="black"),lines(c(0,1),c(.75,.75),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.8,.8),lwd=2,lty=3, col="black"),lines(c(0,1),c(.85,.85),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.9,.9),lwd=2,lty=3, col="black"),lines(c(0,1),c(.95,.95),lwd=2,lty=3, col="black"),
lines(c(0,1),c(1,1),lwd=2,lty=3, col="black")))
axis(1, seq(0.5,49.5,1), seq(1,50.1))
axis(2, seq(0,1000,50), seq(0,1000,50))
### Indices de dificultad
P <- NULL
for(i in 1:ncol(Datos)){
P[i] <- mean(Datos[,i])
}
min(P)
max(P)
hist(P, breaks = seq(0.0,1,.05), axes=F, main="Distribución de Índices de Dificultad clásicos", col="indianred3",
xlab="Índice de dificultad",ylab="Frecuencia (No. de items)", cex.lab=1.3,
panel.first =
c(lines(c(0,1),c(1,1),lwd=2,lty=3, col="black"),lines(c(0,1),c(0.0625,0.0625),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.125,.125),lwd=2,lty=3, col="black"),lines(c(0,1),c(.1875,.1875),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.25,.25),lwd=2,lty=3, col="black"),lines(c(0,1),c(.3125,.3125),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.375,.375),lwd=2,lty=3, col="black"),lines(c(0,1),c(.4375,.4375),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.5,.5),lwd=2,lty=3, col="black"),lines(c(0,1),c(.5625,.5625),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.625,.625),lwd=2,lty=3, col="black"),lines(c(0,1),c(.6875,.6875),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.75,.75),lwd=2,lty=3, col="black"),lines(c(0,1),c(.8125,.8125),lwd=2,lty=3, col="black"),
lines(c(0,1),c(.875,.875),lwd=2,lty=3, col="black"),lines(c(0,1),c(.9375,.9375),lwd=2,lty=3, col="black"),
lines(c(0,1),c(1,1),lwd=2,lty=3, col="black")))
axis(1, seq(0,1,0.05), seq(0,1,0.05))
axis(2, seq(0,16,1), seq(0,16,1))
#############################################
#############################################
################### Alfas de Cronbach
#Calculamos las alphas
Cronbach_general <- alpha(Datos); Cronbach_general
# 0.82
Cronbach_Eje1 <- alpha(D_E1); Cronbach_Eje1
# 0.67
Cronbach_Eje2 <- alpha(D_E2); Cronbach_Eje2
# 0.59
Cronbach_Eje3 <- alpha(D_E3); Cronbach_Eje3
# 0.54
#library(psy)             # Aquí hay código con otro paquete, pero el resultado es el mismo
#cronbach(Datos)          #      y el output es menos informativo
#cronbach(D_E1)
#cronbach(D_E2)
#cronbach(D_E3)
#Evaluamos las Correlaciones entre los items
cor_dat <- cor(Datos)
lowerCor(Datos)
#View(cor_datos)
corPlot(Datos)   #Note all correlations are positive
#############################################
##
# Primera revisión de la composición de los datos
#
# Análisis de Componentes Principales (ACP)
# Análisis Paralelo
# VSS
##
#############################################
ACP <- prcomp(Datos)
summary(ACP)
screeplot(ACP)
#According to the Screeplot, 1 component seems to be good enough
AP <- fa.parallel(Datos); AP
#"Suggest that number of factors = 15 with 5 components
VSS <- vss(Datos);VSS
#BIC achieves a minimum with 4 factors
#BIC-Sample Size adjusted is reduced with 7 factors
#############################################
##
# Análisis Factorial
##
#############################################
explore_1 <- factanal(Datos, factors = 1, method = "mle")
explore_2 <- factanal(Datos, factors = 2, method = "mle")
explore_3 <- factanal(Datos, factors = 3, method = "mle")
explore_4 <- factanal(Datos, factors = 4, method = "mle")
explore_5 <- factanal(Datos, factors = 5, method = "mle")
explore_6 <- factanal(Datos, factors = 6, method = "mle")
explore_7 <- factanal(Datos, factors = 7, method = "mle")
explore_8 <- factanal(Datos, factors = 8, method = "mle")
explore_9 <- factanal(Datos, factors = 9, method = "mle")
explore_10 <- factanal(Datos, factors = 10, method = "mle")
explore_11 <- factanal(Datos, factors = 11, method = "mle")
cor.plot.upperLowerCi(Datos)
corPlotUpperLowerCi(Datos)
corPlotUpperLowerCi(lowerCor(Datos))
min(cor_dat)
summary(cor_dat)
install.packages("corrplot")
#cronbach(D_E3)
library(corrplot)
#Evaluamos las Correlaciones entre los items
cor_dat <- cor(Datos)
lowerCor(Datos)
#View(cor_datos)
corPlot(Datos)   #Note all correlations are positive
corrplot(cor_dat, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#############################################
##
# Primera revisión de la composición de los datos
#
# Análisis de Componentes Principales (ACP)
# Análisis Paralelo
round(cor_dat,2)
corrplot(cor_dat, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
?corPlot
corPlot(Datos, diag=FALSE)   #Note all correlations are positive
?lowerCor
a <- lowerCor(Datos)
min(a)
max(a)
for(i in 1:length(a)){
ifelse(a[i]==1,a[i] <- 0, 2+2)}
a
max(a)
min(a)
pmax(a)
lowerCor(Datos)
Lower <- lowerCor(Datos)
for(i in 1:Lower){
ifelse(Lower[i]==1, Lower[i]<- "NA", 2+2)
}
Lower <- lowerCor(Datos)
for(i in 1:length(Lower)){
ifelse(Lower[i]==1, Lower[i]<- "NA", 2+2)
}
min(Lower)
max(Lower)
max(Lower)
Lower <- lowerCor(Datos)
for(i in 1:length(Lower)){
ifelse(Lower[i]==1, Lower[i]<- "0", 2+2)
}
min(Lower)
max(Lower)
cor_dat <- cor(Datos)
corPlot(Datos)   #Note all correlations are positive
min(cor_dat)
cor_dat
Lower
Lower <- lowerCor(Datos)
min(Lower)
for(i in 1:length(Lower)){
ifelse(Lower[i]==1, Lower[i]<- "0", 2+2)
}
min(Lower)
cor_dat <- cor(Datos)
corPlot(Datos)   #Note all correlations are positive
Lower <- lowerCor(Datos)
Lower_Values <- as.vector(Lower)
for(i in 1:length(Lower_Values)){
ifelse(Lower_Values[i]==1, Lower_Values[i]<- "0", 2+2)
}
min(Lower_Values)
max(Lower_Values)
#View(cor_datos)
min(Lower)
Lower_Values
Lower <- lowerCor(Datos)
min(Lower)
Lower_Values <- as.vector(Lower)
for(i in 1:length(Lower_Values)){
ifelse(Lower_Values[i]==1, Lower_Values[i]<- "0", 2+2)
}
max(Lower_Values)
Lower_Values
Lower
Lower <- lowerCor(Datos)
min(Lower)
Lower_Values <- as.vector(Lower)
for(i in 1:length(Lower_Values)){
ifelse(Lower_Values[i]==1, Lower_Values[i]<- "0", 2+2)
}
max(Lower_Values)
#View(cor_datos)
Lower
Lower <- lowerCor(Datos)
Lower
min(cor_dat)
sort(lowerCor(Datos)
)
ascendiente <- sort(lowerCor(Datos))
descendiente <- sort(lowerCor(Datos), descending=TRUE)
descendiente <- sort(lowerCor(Datos), decreasing=TRUE)
ascendiente <- sort(lowerCor(Datos))
descendiente <- sort(lowerCor(Datos), decreasing=TRUE)
ascendiente
ascendiente[1,3,5,7,9]
ascendiente[c(1,3,5,7,9)]
descendiente[c(1,3,5,7,9)]
descendiente[c(50,3,5,7,9)]
descendiente[c(51,3,5,7,9)]
descendiente[c(51,53,55,57,59)]
library(corrplot)
round(cor_dat,2)
corrplot(cor_dat, type = "upper", order = "hclust",    #This is just a cool plot, which utility gets lost due to the
tl.col = "black", tl.srt = 45)                            #very low levels of Correlation reflected in our data
ascendiente[c(1,3,5,7,9)]   #Cinco correlaciones más BAJAS
descendiente[c(51,53,55,57,59)]    #Cinco correlaiones más ALTAS
#############################################
##
#    ALFA DE CRONBACH      ##################
##
#############################################
#Calculamos las alphas
Cronbach_general <- alpha(Datos); Cronbach_general
# 0.82
Cronbach_Eje1 <- alpha(D_E1); Cronbach_Eje1
# 0.67
Cronbach_Eje2 <- alpha(D_E2); Cronbach_Eje2
# 0.59
Cronbach_Eje3 <- alpha(D_E3); Cronbach_Eje3
# 0.54
#library(ps
Cronbach_Eje3$alpha.drop
Cronbach_Eje3$scores
#############################################
ACP <- prcomp(Datos)
summary(ACP)
screeplot(ACP)
#Accord
ACP <- prcomp(Datos, cor=TRUE)
summary(ACP)
screeplot(ACP)
loadings(ACP)
plot(ACP,type="lines")
plot(ACP,type="lines", main="Principal Component Analysis - Screeplot")
biplot(ACP)
#############################################
ACP <- prcomp(Datos, cor=TRUE)
summary(ACP)
plot(ACP,type="lines", main="Principal Component Analysis - Screeplot")   #Line Screeplot
screeplot(ACP)   #Bar screeplot
#According to the Screeplot, 1 component seems to be good enough
##########################################
ACP <- prcomp(Datos, cor=TRUE)
summary(ACP)
plot(ACP,type="lines", main="Principal Component Analysis - Screeplot")   #Line Screeplot
screeplot(ACP)   #Bar screeplot
#Acco
AP <- fa.parallel(Datos); AP
fa.parallel(Datos)
?fa.parallel
AP <- fa.parallel(Datos); AP
#Suggest that number of factors = 18 with 5 components
VSS <- vss(Datos);VSS
VSS <- vss(Datos,n=2);VSS
VSS <- vss(Datos,n=3);VSS
VSS <- vss(Datos,n=2);VSS
VSS <- vss(Datos,n=8);VSS
VSS <- vss(Datos,n=5);VSS
VSS <- vss(Datos,n=1);VSS
VSS <- vss(Datos);VSS
VSS <- vss(Datos, n=8);VSS
VSS <- vss(Datos, n=7);VSS
VSS <- vss(Datos, n=8);VSS
#############################################
cor_dat <- cor(Datos)
lowerCor(Datos)
corPlot(Datos)   #Note all correlations are *almost* positive
#Ordenamos las correlaciones en orden ascendente y descendiente
ascendiente <- sort(lowerCor(Datos))
descendiente <- sort(lowerCor(Datos), decreasing=TRUE)
ascendiente[c(1,3,5,7,9)]   #Cinco correlaciones más BAJAS
#-.003, -.002,   0.0003,    0.002,   0.004
descendiente[c(51,53,55,57,59)]    #Cinco correlaiones más ALTAS
#.251,    .246     .236     .229     .223
library(corrplot)
round(cor_dat,2)
corrplot(cor_dat, type = "upper", order = "hclust",    #This is just a cool plot, which utility gets lost due to the
tl.col = "black", tl.srt = 45)                            #very low levels of Correlation reflected in our data
ascendiente[c(1,3,5,7,9)]
install.packages("nFactors")
library(nFactors)
ev <- eigen(cor(Datos)) # get eigenvalues
ap <- parallel(subject=nrow(DAtos),var=ncol(Datos),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
library(nFactors)
ev <- eigen(cor(Datos)) # get eigenvalues
ap <- parallel(subject=nrow(Datos),var=ncol(Datos),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
explore_1 <- factanal(Datos, factors = 1, method = "mle")
explore_2 <- factanal(Datos, factors = 2, method = "mle")
explore_3 <- factanal(Datos, factors = 3, method = "mle")
explore_4 <- factanal(Datos, factors = 4, method = "mle")
explore_5 <- factanal(Datos, factors = 5, method = "mle")
explore_6 <- factanal(Datos, factors = 6, method = "mle")
explore_7 <- factanal(Datos, factors = 7, method = "mle")
explore_8 <- factanal(Datos, factors = 8, method = "mle")
explore_9 <- factanal(Datos, factors = 9, method = "mle")
explore_10 <- factanal(Datos, factors = 10, method = "mle")
explore_11 <- factanal(Datos, factors = 11, method = "mle")
explore_1
explore_5
explore_3
explore_3
explore_3b <- factanal(Datos, factors = 3, rotation= "varimax")
explore_3b
explore_5
