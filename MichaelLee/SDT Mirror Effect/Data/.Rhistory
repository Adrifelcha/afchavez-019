plot(density(Delta), col='blue4', lwd=3.5, ann=F, axes=F, xlim=c(-0.5,2))
#lines(seq(-100,100,.05), dnorm(seq(-100,100,.05), 0,1), lwd=1, col="darkorchid3")
lines(density(prior_delta), lwd=1, col="red")
axis(1)
axis(2, line=.5)
mtext("Density", side=2, line=3.5, cex=1.5, las=0, font=1)
mtext("Delta", side=1, line=2.5, cex=2)
title("Bayes Factor for the prior and posterior densities of Delta", line=2.2, cex=2)
mtext(side=3, paste("Experiment No.", exp), cex=1,line=0.5)
points(0,dot_x, pch=16, type='p', col='red', cex=1.5)
points(0,dot_prior, pch=16, type='p', col='red', cex=1.5)
lines(c(0,0), c(dot_x, dot_prior), lwd=1, col="red", lty=2)
legend(1.2,1.25, legend=c("Prior", "Posterior"),
col=c("red", "blue4"), lty=1, cex=1.2, lwd=2)
text(0,0.84,paste(round(SavageDickey,3)), f=2)
text(0,0.9,paste("Bayes Factor"),f=2)
## DELTA HITS
layout(matrix(1:1,ncol=1))
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
prior_delta <- rbeta((niter-burnin),1,1)
SavageDickey <- dbeta(0,1,1)/dnorm(0,mean(deltaH),sd(deltaH))
dot_prior <- max(density(prior_delta)$y)
dot_x <- max(density(deltaH)$y[which(density(deltaH)$x<0.01&density(deltaH)$x>-0.01)])
layout(matrix(1:1,ncol=1))
plot(density(deltaH), col='blue4', lwd=3.5, ann=F, axes=F, xlim=c(-0.5,2))
#lines(seq(-100,100,.05), dnorm(seq(-100,100,.05), 0,1), lwd=1, col="darkorchid3")
lines(density(prior_delta), lwd=1, col="red")
axis(1)
axis(2, line=.5)
mtext("Density", side=2, line=3.5, cex=1.5, las=0, font=1)
mtext("Delta", side=1, line=2.5, cex=2)
title("Bayes Factor for the prior and posterior densities of Delta", line=2.2, cex=2)
mtext(side=3, paste("Experiment No.", exp), cex=1,line=0.5)
points(0,dot_x, pch=16, type='p', col='red', cex=1.5)
points(0,dot_prior, pch=16, type='p', col='red', cex=1.5)
lines(c(0,0), c(dot_x, dot_prior), lwd=1, col="red", lty=2)
legend(1.2,1.25, legend=c("Prior", "Posterior"),
col=c("red", "blue4"), lty=1, cex=1.2, lwd=2)
text(0,0.84,paste(round(SavageDickey,3)), f=2)
text(0,0.9,paste("Bayes Factor"),f=2)
## DELTA HITS
layout(matrix(1:1,ncol=1))
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
prior_delta <- rbeta((niter-burnin),1,1)
SavageDickey <- dbeta(0,1,1)/dnorm(0,mean(deltaH),sd(deltaH))
dot_prior <- max(density(prior_delta)$y)
dot_x <- max(density(deltaH)$y[which(density(deltaH)$x<0.01&density(deltaH)$x>-0.01)])
layout(matrix(1:1,ncol=1))
plot(density(deltaH), col='blue4', lwd=3.5, ann=F, axes=F, xlim=c(-0.5,2))
#lines(seq(-100,100,.05), dnorm(seq(-100,100,.05), 0,1), lwd=1, col="darkorchid3")
lines(density(prior_delta), lwd=1, col="red")
axis(1)
axis(2, line=.5)
mtext("Density", side=2, line=3.5, cex=1.5, las=0, font=1)
mtext("Delta", side=1, line=2.5, cex=2)
title("Bayes Factor for the prior and posterior densities of Delta", line=2.2, cex=2)
mtext(side=3, paste("Experiment No.", exp), cex=1,line=0.5)
points(0,dot_x, pch=16, type='p', col='red', cex=1.5)
points(0,dot_prior, pch=16, type='p', col='red', cex=1.5)
lines(c(0,0), c(dot_x, dot_prior), lwd=1, col="red", lty=2)
legend(1.2,1.25, legend=c("Prior", "Posterior"),
col=c("red", "blue4"), lty=1, cex=1.2, lwd=2)
text(0,0.84,paste(round(SavageDickey,3)), f=2)
text(0,0.9,paste("Bayes Factor"),f=2)
deltaH
deltaH <- samples$BUGSoutput$sims.list$deltaH
deltaF <- samples$BUGSoutput$sims.list$deltaF
setwd("C:/Users/Alejandro/Desktop/afchavez19/MichaelLee/SDT Mirror Effect/Data")
rm(list=ls())
dir()
library(R2jags)
##############################################################
##############################################################
#Diferencias en Hits y Falsas Alarmas
#Modelo 1 :  Diferencias entre las Tasas H y FA (parametros TauH y TauF)
#            contra datos generados usando las priors
##############################################################
######################################################
#Especificamos el Experimento y los Datos a analizar
experimento <- 1
###################
if (experimento == 1)    #Una Figura de Ebbinghaus
{
exp <- 1
archive <-'Ex_1Ebb_TODOS.csv'         #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos del archivo
}
if (experimento == 2)   # Dos Figuras de Ebbinghaus
{
exp <- 2
archive <-'Ex_2Ebb_TODOS_Sin1.csv'  #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos
}
h_A <- datos$A_H       #Hits(A)
h_B <- datos$B_H     #Hits(B)
fa_A <- datos$A_FA        #FA(A)
fa_B <- datos$B_FA      #FA(B)
k <- 20                       #Participantes
s <- 160       #Ensayos con Señal
n <- 160       #Ensayos con Ruido
############################################################################
############################################################################
#Escribimos el modelo Inicial
############################################################################
write('
model{
#Posterior estimations (based on the data collected)
for (i in 1:k){
# Posterior density based on our data
h_A[i] ~ dbin(thetah_A[i],s)
fa_A[i] ~ dbin(thetaf_A[i],n)
h_B[i] ~ dbin(thetah_B[i],s)
fa_B[i] ~ dbin(thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
thetah_A[i] ~ dnorm(muHA,sdHA)T(0.5,1)
thetaf_A[i] ~ dnorm(muFA,sdFA)T(0,0.5)
thetah_B[i] ~ dnorm(muHB,sdHB)T(0.5,1)
thetaf_B[i] ~ dnorm(muFB,sdFB)T(0,0.5)
}
sdFA ~ dbeta(1,1)T(0.001,0.5)
sdFB ~ dbeta(1,1)T(0.001,0.5)
sdHA ~ dbeta(1,1)T(0.001,0.5)
sdHB ~ dbeta(1,1)T(0.001,0.5)
muHA <- muH + deltaH/2
muFA <- muF - deltaF/2
muHB <- muH - deltaH/2
muFB <- muF + deltaF/2
deltaH ~ dbeta(1,1)
deltaF ~ dbeta(1,1)
muH ~ dbeta(1,1)T(0.5,1)
muF ~ dbeta(1,1)T(0,0.5)
#PRIORS
for (i in 1:k){
# Posterior density based on our data
Pr_h_A[i] ~ dbin(Pr_thetah_A[i],s)
Pr_fa_A[i] ~ dbin(Pr_thetaf_A[i],n)
Pr_h_B[i] ~ dbin(Pr_thetah_B[i],s)
Pr_fa_B[i] ~ dbin(Pr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
Pr_thetah_A[i] ~ dnorm(Pr_muHA,Pr_sdHA)T(0.5,1)
Pr_thetaf_A[i] ~ dnorm(Pr_muFA,Pr_sdFA)T(0,0.5)
Pr_thetah_B[i] ~ dnorm(Pr_muHB,Pr_sdHB)T(0.5,1)
Pr_thetaf_B[i] ~ dnorm(Pr_muFB,Pr_sdFB)T(0,0.5)
}
Pr_sdFA ~ dbeta(1,1)T(0.001,0.5)
Pr_sdFB ~ dbeta(1,1)T(0.001,0.5)
Pr_sdHA ~ dbeta(1,1)T(0.001,0.5)
Pr_sdHB ~ dbeta(1,1)T(0.001,0.5)
Pr_muHA <- Pr_muH + Pr_deltaH/2
Pr_muFA <- Pr_muF - Pr_deltaF/2
Pr_muHB <- Pr_muH - Pr_deltaH/2
Pr_muFB <- Pr_muF + Pr_deltaF/2
Pr_deltaH ~ dbeta(1,1)
Pr_deltaF ~ dbeta(1,1)
Pr_muH ~ dbeta(1,1)T(0.5,1)
Pr_muF ~ dbeta(1,1)T(0,0.5)
}','Delta-Rate.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("fa_A", "fa_B", "h_B", "h_A", "s", "n", "k")                    #Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(deltaH = 0.75, deltaF = 0.25, muH = 0.75,muF = 0.25))      #Valores iniciales para las extracciones de las cadenas de Markov
#Parámetros monitoreados
parameters <- c("thetah_A", "thetaf_A", "thetah_B", "thetaf_B",
"Pr_thetah_A", "Pr_thetaf_A", "Pr_thetah_B", "Pr_thetaf_B",
"muHA","muHB","muFA","muFB",
"Pr_muHA","Pr_muHB","Pr_muFA","Pr_muFB",
"deltaH","deltaF",
"Pr_deltaH","Pr_deltaF",
"muH", "muF",
"Pr_muH", "Pr_muF",
"Pr_h_A", " Pr_h_B", " Pr_fa_A", " Pr_fa_B")
niter <- 50000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Delta-Rate.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
####################################################################
# Jalamos los resultados de correr el modelo (Inferencias)
# a.k.a.:
#Le ponemos una etiqueta a cada elemento contenido en Samples
####################################################################
tetaH_a <- samples$BUGSoutput$sims.list$thetah_A
tetaH_b <- samples$BUGSoutput$sims.list$thetah_B
tetaFA_a <- samples$BUGSoutput$sims.list$thetaf_A
tetaFA_b <- samples$BUGSoutput$sims.list$thetaf_B
deltaH <- samples$BUGSoutput$sims.list$deltaH
deltaF <- samples$BUGSoutput$sims.list$deltaF
#Prior predictiva
Pr_Ha <- samples$BUGSoutput$sims.list$Pr_h_A
Pr_Hb <- samples$BUGSoutput$sims.list$Pr_h_B
Pr_Fa <- samples$BUGSoutput$sims.list$Pr_fa_A
Pr_Fb <- samples$BUGSoutput$sims.list$Pr_fa_B
Pr_tetaH_a <- samples$BUGSoutput$sims.list$Pr_thetah_A
Pr_tetaH_b <- samples$BUGSoutput$sims.list$Pr_thetah_B
Pr_tetaFA_a <- samples$BUGSoutput$sims.list$Pr_thetaf_A
Pr_tetaFA_b <- samples$BUGSoutput$sims.list$Pr_thetaf_B
Pr_deltaH <- samples$BUGSoutput$sims.list$Pr_deltaH
Pr_deltaF <- samples$BUGSoutput$sims.list$Pr_deltaH
Predicted_Ha <- NULL
Predicted_Hb <- NULL
Predicted_Fa <- NULL
Predicted_Fb <- NULL
for(i in 1:k){
Predicted_Ha[i] <- round(median(density(Pr_Ha[,i])$x[which(density(Pr_Ha[,i])$y==max(density(Pr_Ha[,i])$y))-rbinom(1,10,.5)]),0)
Predicted_Hb[i] <- round(median(density(Pr_Hb[,i])$x[which(density(Pr_Hb[,i])$y==max(density(Pr_Hb[,i])$y))-rbinom(1,10,.5)]),0)
Predicted_Fa[i] <- round(median(density(Pr_Fa[,i])$x[which(density(Pr_Fa[,i])$y==max(density(Pr_Fa[,i])$y))+rbinom(1,10,.5)]),0)
Predicted_Fb[i] <- round(median(density(Pr_Fb[,i])$x[which(density(Pr_Fb[,i])$y==max(density(Pr_Fb[,i])$y))+rbinom(1,10,.5)]),0)
}
############################################################################
############################################################################
#Escribimos nuevamente el modelo para obtener estimados basados en las Priors
############################################################################
write('
model{
for (i in 1:k){
# Prior predicted counts
Predicted_Ha[i] ~ dbin(PPr_thetah_A[i],s)
Predicted_Fa[i] ~ dbin(PPr_thetaf_A[i],n)
Predicted_Hb[i] ~ dbin(PPr_thetah_B[i],s)
Predicted_Fb[i] ~ dbin(PPr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
PPr_thetah_A[i] ~ dnorm(PPr_muHA,PPr_sdHA)T(0.5,1)
PPr_thetaf_A[i] ~ dnorm(PPr_muFA,PPr_sdFA)T(0,0.5)
PPr_thetah_B[i] ~ dnorm(PPr_muHB,PPr_sdHB)T(0.5,1)
PPr_thetaf_B[i] ~ dnorm(PPr_muFB,PPr_sdFB)T(0,0.5)}
PPr_sdFA ~ dbeta(1,1)T(0.001,0.5)
PPr_sdFB ~ dbeta(1,1)T(0.001,0.5)
PPr_sdHA ~ dbeta(1,1)T(0.001,0.5)
PPr_sdHB ~ dbeta(1,1)T(0.001,0.25)
PPr_muHA <- PPr_muH + PPr_deltaH/2
PPr_muFA <- PPr_muF - PPr_deltaF/2
PPr_muHB <- PPr_muH - PPr_deltaH/2
PPr_muFB <- PPr_muF + PPr_deltaF/2
PPr_deltaH ~ dbeta(1,1)
PPr_deltaF ~ dbeta(1,1)
PPr_muH ~ dbeta(1,1)T(0.5,1)
PPr_muF ~ dbeta(1,1)T(0,0.5)}',
'Rate_predictive.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("Predicted_Ha", "Predicted_Hb", "Predicted_Fa", "Predicted_Fb", "s", "n", "k")
#Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(PPr_deltaH = 0.75, PPr_deltaF = 0.25, PPr_muH = 0.75, PPr_muF = 0.25))
#Parámetros monitoreados
parameters <- c("PPr_thetah_A", "PPr_thetaf_A", "PPr_thetah_B", "PPr_thetaf_B",
"PPr_muHA","PPr_muHB","PPr_muFA","PPr_muFB",
"PPr_deltaH","PPr_deltaF",
"PPr_muH", "PPr_muF")
niter <- 100000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Rate_predictive.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
####################################################################
# Jalamos los resultados de correr el modelo (Inferencias)
# a.k.a.:
#Le ponemos una etiqueta a cada elemento contenido en Samples
####################################################################
#Prior predictiva
PPr_tetaH_a <- samples$BUGSoutput$sims.list$PPr_thetah_A
PPr_tetaH_b <- samples$BUGSoutput$sims.list$PPr_thetah_B
PPr_tetaFA_a <- samples$BUGSoutput$sims.list$PPr_thetaf_A
PPr_tetaFA_b <- samples$BUGSoutput$sims.list$PPr_thetaf_B
#######################################
tetaH_a
tetaH_b
deltaH
deltaF
setwd("C:/Users/Alejandro/Desktop/afchavez19/MichaelLee/SDT Mirror Effect/Data")
rm(list=ls())
dir()
library(R2jags)
##############################################################
##############################################################
#Diferencias en Hits y Falsas Alarmas
#Modelo 1 :  Diferencias entre las Tasas H y FA (parametros TauH y TauF)
#            contra datos generados usando las priors
##############################################################
######################################################
#Especificamos el Experimento y los Datos a analizar
experimento <- 1
###################
if (experimento == 1)    #Una Figura de Ebbinghaus
{
exp <- 1
archive <-'Ex_1Ebb_TODOS.csv'         #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos del archivo
}
if (experimento == 2)   # Dos Figuras de Ebbinghaus
{
exp <- 2
archive <-'Ex_2Ebb_TODOS_Sin1.csv'  #El archivo que contiene los datos
datos <- read.csv(archive)          #Jalamos los datos
}
h_A <- datos$A_H       #Hits(A)
h_B <- datos$B_H     #Hits(B)
fa_A <- datos$A_FA        #FA(A)
fa_B <- datos$B_FA      #FA(B)
k <- 20                       #Participantes
s <- 160       #Ensayos con Señal
n <- 160       #Ensayos con Ruido
############################################################################
############################################################################
#Escribimos el modelo Inicial
############################################################################
write('
model{
#Posterior estimations (based on the data collected)
for (i in 1:k){
# Posterior density based on our data
h_A[i] ~ dbin(thetah_A[i],s)
fa_A[i] ~ dbin(thetaf_A[i],n)
h_B[i] ~ dbin(thetah_B[i],s)
fa_B[i] ~ dbin(thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
thetah_A[i] ~ dnorm(muHA,sdHA)T(0.5,1)
thetaf_A[i] ~ dnorm(muFA,sdFA)T(0,0.5)
thetah_B[i] ~ dnorm(muHB,sdHB)T(0.5,1)
thetaf_B[i] ~ dnorm(muFB,sdFB)T(0,0.5)
}
sdFA ~ dbeta(1,1)T(0.001,0.5)
sdFB ~ dbeta(1,1)T(0.001,0.5)
sdHA ~ dbeta(1,1)T(0.001,0.5)
sdHB ~ dbeta(1,1)T(0.001,0.5)
muHA <- muH + deltaH/2
muFA <- muF - deltaF/2
muHB <- muH - deltaH/2
muFB <- muF + deltaF/2
deltaH ~ dbeta(1,1)
deltaF ~ dbeta(1,1)
muH ~ dbeta(1,1)T(0.5,1)
muF ~ dbeta(1,1)T(0,0.5)
#PRIORS
for (i in 1:k){
# Posterior density based on our data
Pr_h_A[i] ~ dbin(Pr_thetah_A[i],s)
Pr_fa_A[i] ~ dbin(Pr_thetaf_A[i],n)
Pr_h_B[i] ~ dbin(Pr_thetah_B[i],s)
Pr_fa_B[i] ~ dbin(Pr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
Pr_thetah_A[i] ~ dnorm(Pr_muHA,Pr_sdHA)T(0.5,1)
Pr_thetaf_A[i] ~ dnorm(Pr_muFA,Pr_sdFA)T(0,0.5)
Pr_thetah_B[i] ~ dnorm(Pr_muHB,Pr_sdHB)T(0.5,1)
Pr_thetaf_B[i] ~ dnorm(Pr_muFB,Pr_sdFB)T(0,0.5)
}
Pr_sdFA ~ dbeta(1,1)T(0.001,0.5)
Pr_sdFB ~ dbeta(1,1)T(0.001,0.5)
Pr_sdHA ~ dbeta(1,1)T(0.001,0.5)
Pr_sdHB ~ dbeta(1,1)T(0.001,0.5)
Pr_muHA <- Pr_muH + Pr_deltaH/2
Pr_muFA <- Pr_muF - Pr_deltaF/2
Pr_muHB <- Pr_muH - Pr_deltaH/2
Pr_muFB <- Pr_muF + Pr_deltaF/2
Pr_deltaH ~ dbeta(1,1)
Pr_deltaF ~ dbeta(1,1)
Pr_muH ~ dbeta(1,1)T(0.5,1)
Pr_muF ~ dbeta(1,1)T(0,0.5)
}','Delta-Rate.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("fa_A", "fa_B", "h_B", "h_A", "s", "n", "k")                    #Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(deltaH = 0.75, deltaF = 0.25, muH = 0.75,muF = 0.25))      #Valores iniciales para las extracciones de las cadenas de Markov
#Parámetros monitoreados
parameters <- c("thetah_A", "thetaf_A", "thetah_B", "thetaf_B",
"Pr_thetah_A", "Pr_thetaf_A", "Pr_thetah_B", "Pr_thetaf_B",
"muHA","muHB","muFA","muFB",
"Pr_muHA","Pr_muHB","Pr_muFA","Pr_muFB",
"deltaH","deltaF",
"Pr_deltaH","Pr_deltaF",
"muH", "muF",
"Pr_muH", "Pr_muF",
"Pr_h_A", " Pr_h_B", " Pr_fa_A", " Pr_fa_B")
niter <- 50000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Delta-Rate.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
####################################################################
# Jalamos los resultados de correr el modelo (Inferencias)
# a.k.a.:
#Le ponemos una etiqueta a cada elemento contenido en Samples
####################################################################
tetaH_a <- samples$BUGSoutput$sims.list$thetah_A
tetaH_b <- samples$BUGSoutput$sims.list$thetah_B
tetaFA_a <- samples$BUGSoutput$sims.list$thetaf_A
tetaFA_b <- samples$BUGSoutput$sims.list$thetaf_B
deltaH <- samples$BUGSoutput$sims.list$deltaH
deltaF <- samples$BUGSoutput$sims.list$deltaF
#Prior predictiva
Pr_Ha <- samples$BUGSoutput$sims.list$Pr_h_A
Pr_Hb <- samples$BUGSoutput$sims.list$Pr_h_B
Pr_Fa <- samples$BUGSoutput$sims.list$Pr_fa_A
Pr_Fb <- samples$BUGSoutput$sims.list$Pr_fa_B
Pr_tetaH_a <- samples$BUGSoutput$sims.list$Pr_thetah_A
Pr_tetaH_b <- samples$BUGSoutput$sims.list$Pr_thetah_B
Pr_tetaFA_a <- samples$BUGSoutput$sims.list$Pr_thetaf_A
Pr_tetaFA_b <- samples$BUGSoutput$sims.list$Pr_thetaf_B
Pr_deltaH <- samples$BUGSoutput$sims.list$Pr_deltaH
Pr_deltaF <- samples$BUGSoutput$sims.list$Pr_deltaH
Predicted_Ha <- NULL
Predicted_Hb <- NULL
Predicted_Fa <- NULL
Predicted_Fb <- NULL
for(i in 1:k){
Predicted_Ha[i] <- round(median(density(Pr_Ha[,i])$x[which(density(Pr_Ha[,i])$y==max(density(Pr_Ha[,i])$y))-rbinom(1,10,.5)]),0)
Predicted_Hb[i] <- round(median(density(Pr_Hb[,i])$x[which(density(Pr_Hb[,i])$y==max(density(Pr_Hb[,i])$y))-rbinom(1,10,.5)]),0)
Predicted_Fa[i] <- round(median(density(Pr_Fa[,i])$x[which(density(Pr_Fa[,i])$y==max(density(Pr_Fa[,i])$y))+rbinom(1,10,.5)]),0)
Predicted_Fb[i] <- round(median(density(Pr_Fb[,i])$x[which(density(Pr_Fb[,i])$y==max(density(Pr_Fb[,i])$y))+rbinom(1,10,.5)]),0)
}
############################################################################
############################################################################
#Escribimos nuevamente el modelo para obtener estimados basados en las Priors
############################################################################
write('
model{
for (i in 1:k){
# Prior predicted counts
Predicted_Ha[i] ~ dbin(PPr_thetah_A[i],s)
Predicted_Fa[i] ~ dbin(PPr_thetaf_A[i],n)
Predicted_Hb[i] ~ dbin(PPr_thetah_B[i],s)
Predicted_Fb[i] ~ dbin(PPr_thetaf_B[i],n)
# Reparameterization Using Equal-Variance Gaussian SDT
PPr_thetah_A[i] ~ dnorm(PPr_muHA,PPr_sdHA)T(0.5,1)
PPr_thetaf_A[i] ~ dnorm(PPr_muFA,PPr_sdFA)T(0,0.5)
PPr_thetah_B[i] ~ dnorm(PPr_muHB,PPr_sdHB)T(0.5,1)
PPr_thetaf_B[i] ~ dnorm(PPr_muFB,PPr_sdFB)T(0,0.5)}
PPr_sdFA ~ dbeta(1,1)T(0.001,0.5)
PPr_sdFB ~ dbeta(1,1)T(0.001,0.5)
PPr_sdHA ~ dbeta(1,1)T(0.001,0.5)
PPr_sdHB ~ dbeta(1,1)T(0.001,0.25)
PPr_muHA <- PPr_muH + PPr_deltaH/2
PPr_muFA <- PPr_muF - PPr_deltaF/2
PPr_muHB <- PPr_muH - PPr_deltaH/2
PPr_muFB <- PPr_muF + PPr_deltaF/2
PPr_deltaH ~ dbeta(1,1)
PPr_deltaF ~ dbeta(1,1)
PPr_muH ~ dbeta(1,1)T(0.5,1)
PPr_muF ~ dbeta(1,1)T(0,0.5)}',
'Rate_predictive.bug')
######################################
######################################
# Definimos los elementos de trabajo
######################################
data <- list("Predicted_Ha", "Predicted_Hb", "Predicted_Fa", "Predicted_Fb", "s", "n", "k")
#Los datos que vamos a utilizar para nuestro modelo
myinits <- list(
list(PPr_deltaH = 0.75, PPr_deltaF = 0.25, PPr_muH = 0.75, PPr_muF = 0.25))
#Parámetros monitoreados
parameters <- c("PPr_thetah_A", "PPr_thetaf_A", "PPr_thetah_B", "PPr_thetaf_B",
"PPr_muHA","PPr_muHB","PPr_muFA","PPr_muFB",
"PPr_deltaH","PPr_deltaF",
"PPr_muH", "PPr_muF")
niter <- 100000    #Iteraciones
burnin <- 5000     #No. de primeros sampleos en ignorarse
#Corremos el modelo
samples <- jags(data, inits=myinits, parameters,
model.file ="Rate_predictive.bug",
n.chains=1, n.iter=niter, n.burnin=burnin, n.thin=1)
####################################################################
# Jalamos los resultados de correr el modelo (Inferencias)
# a.k.a.:
#Le ponemos una etiqueta a cada elemento contenido en Samples
####################################################################
#Prior predictiva
PPr_tetaH_a <- samples$BUGSoutput$sims.list$PPr_thetah_A
PPr_tetaH_b <- samples$BUGSoutput$sims.list$PPr_thetah_B
PPr_tetaFA_a <- samples$BUGSoutput$sims.list$PPr_thetaf_A
PPr_tetaFA_b <- samples$BUGSoutput$sims.list$PPr_thetaf_B
##########################################################
##########################################################
################################
deltaH
###############
######### DELTA HITS
layout(matrix(1:1,ncol=1))
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
prior_delta <- rbeta((niter-burnin),1,1)
SavageDickey <- dbeta(0,1,1)/dnorm(0,mean(deltaH),sd(deltaH))
dot_prior <- max(density(prior_delta)$y)
dot_x <- max(density(deltaH)$y[which(density(deltaH)$x<0.01&density(deltaH)$x>-0.01)])
layout(matrix(1:1,ncol=1))
plot(density(deltaH), col='blue4', lwd=3.5, ann=F, axes=F, xlim=c(-0.5,2))
#lines(seq(-100,100,.05), dnorm(seq(-100,100,.05), 0,1), lwd=1, col="darkorchid3")
lines(density(prior_delta), lwd=1, col="red")
axis(1)
axis(2, line=.5)
mtext("Density", side=2, line=3.5, cex=1.5, las=0, font=1)
mtext("Delta", side=1, line=2.5, cex=2)
title("Bayes Factor for the prior and posterior densities of Delta", line=2.2, cex=2)
mtext(side=3, paste("Experiment No.", exp), cex=1,line=0.5)
points(0,dot_x, pch=16, type='p', col='red', cex=1.5)
points(0,dot_prior, pch=16, type='p', col='red', cex=1.5)
lines(c(0,0), c(dot_x, dot_prior), lwd=1, col="red", lty=2)
legend(1.2,1.25, legend=c("Prior", "Posterior"),
col=c("red", "blue4"), lty=1, cex=1.2, lwd=2)
text(0,0.84,paste(round(SavageDickey,3)), f=2)
text(0,0.9,paste("Bayes Factor"),f=2)
