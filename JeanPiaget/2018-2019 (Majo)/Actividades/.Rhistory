layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l', main="Distribución Poisson", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
lines(c(Gl,Gl), c(0,1))
### Distribución  Poisson
#####################
Gl <- 3 #El valor del parámetro lambda
x <- seq(0,8,1)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l', main="Distribución Poisson", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Distribución  Poisson
#####################
Gl <- 3 #El valor del parámetro lambda
x <- seq(0,8,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l', main="Distribución Poisson", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Distribución  Poisson
#####################
Gl <- 3 #El valor del parámetro lambda
x <- seq(0,8,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l', main="Distribución Poisson", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
p_valor <- pchisq(G2, gl, lower.tail=F)m
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Hola")
}else{
print"Adios"
}
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
p_valor <- pchisq(G2, gl, lower.tail=F)m
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Hola")
}else{
print("Adios")
}
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
p_valor <- pchisq(G2, gl, lower.tail=F)m
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Cae en Zona Crítica : Se rechaza la HO")
}else{
print("cae en Zona de Confianza: Se mantiene la HO")
}
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
decision
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
#Computamos el área sobre el estadístico G^2 e una Distribución Chi-cuadrada con (Parámetros_2 - Parámetros_1) Grados de Libertad
p_valor <- pchisq(G2, gl, lower.tail=F)
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Cae en Zona Crítica : Se rechaza la HO")
}else{
print("cae en Zona de Confianza: Se mantiene la HO")
}
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
#Computamos el área sobre el estadístico G^2 e una Distribución Chi-cuadrada con (Parámetros_2 - Parámetros_1) Grados de Libertad
p_valor <- pchisq(G2, gl, lower.tail=F)
#Comparamos el área con el nivel de significancia (la probabilidad de caer en la Zona Crítica)
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Cae en Zona Crítica : Se rechaza la HO")
}else{
print("cae en Zona de Confianza: Se mantiene la HO")
}
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
#Computamos el área sobre el estadístico G^2 e una Distribución Chi-cuadrada con (Parámetros_2 - Parámetros_1) Grados de Libertad
p_valor <- pchisq(G2, gl, lower.tail=F)
#Comparamos el área con el nivel de significancia (la probabilidad de caer en la Zona Crítica)
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Cae en Zona Crítica : Se rechaza la HO")
}else{
print("cae en Zona de Confianza: Se mantiene la HO")
}
#Imprimimos los resultados
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
#### Ejemplo 1  : Contraste de Hipótesis por Razón de Verosimilitud
##### Ho: La Media vale 100  <- Parámetro fijo
##### Ha: La Media es distinta de 100   <- Parámetro libre
x <- c(116, 85, 90, 125)  # Muestra
lk <- 0 #Creamos un arreglo vacío, que llenaremos con la función de verosimilitud
#La Funcion de Verosimilitud es la multiplicatoria de la funcion de densidad
likelihood <- function(mu, sigma){    #La función de verosimilitud de una norma depende de sus parámetros Mu y Sigma
lk <- 1   #Valor inicial para la multiplicatoria
for(i in 1:length(x)){   #Por cada elemento contenido en la muestra
lk <- lk * dnorm(x[i], mu, sigma)   #Se definirá una verosimilitud que corresponde al  valor computado en la repetición anterior por la función de densidad Normal (que depende de los datos y los parámetros a estimar)
}
return(lk)   #En esta función, nos interesa recuperar el valor computado para la verosimilitud
}
media <- mean(x)  #Estimamos la media de nuestra muestra
desviacion <- sd(x) #Y la desviación estandar
M1 <- likelihood(100, desviacion)   #Calculamos la Verosimilitud para el Modelo 1, que restringe Mu a 100, y estima Sigma a partir de la muestra (desviación estándar)
M2 <- likelihood(media, desviacion) #Calculamos la verosimilitud para el Modelo General, que estima Mu y Sigma a partir de la muestra (su Media y Desviación Estándar)
razon <- M1/M2 #Computamos la Razón de las Verosimilitudes computadas
#Imprimimos los resultados:
print(paste("La media de los datos es ", media, " y su desviación estándar ", round(desviacion,3)))
cat(
sprintf('La Verosimilitud del Modelo 1 es %14.12f; la del Modelo 2, es %14.12f',M1, M2))
print(paste("La Razón de las Verosimilitudes (lk(M1)/lk(M2)) es ", round(razon,4)))
#Evaluamos el Contraste de la Bondad de Ajustes
alpha <- 0.05  #Probabilidad de caer en la zona crítica
G2 = -2*log(razon)  #Computamos el Estadístico G^2
gl <- 1  #La diferencia entre los parámetros libres en el Modelo General (2 parámetros) y el Modelo Anidado (1 parámetro)
#Computamos el área sobre el estadístico G^2 e una Distribución Chi-cuadrada con (Parámetros_2 - Parámetros_1) Grados de Libertad
p_valor <- pchisq(G2, gl, lower.tail=F)
#Comparamos el área con el nivel de significancia (la probabilidad de caer en la Zona Crítica)
decision <- ifelse(p_valor <= alpha, "Rechazar H0", "Mantener H0")
#Otra forma de expresar el ciclo ifelse sería:
if(p_valor <= alpha){
print("Cae en Zona Crítica : Se rechaza la HO")
}else{
print("cae en Zona de Confianza: Se mantiene la HO")
}
#Imprimimos los resultados
cat(sprintf('G2 = %5.2f, gl = %1.0f p = %5.3f. Decision: %s', G2, gl, p_valor, decision))
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- seq(0,8,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l', main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- seq(0,10,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l', main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- seq(0,10,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 2 #El valor del parámetro lambda
x <- seq(0,10,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 2 #El valor del parámetro lambda
x <- seq(0,10,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- seq(0,10,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- seq(0,10,.01)  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,10), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,10), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 2 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,10), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 0 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,10), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 9 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,10), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 9 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,1), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 9 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8), ylim=c(0,0.5), main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
### Pesentando la Chi Cuadrada
######
Gl <- 1 #El valor del parámetro lambda
x <- 0:10  #Definimos una base arbitraria
Ex_Chi <- dchisq(x, Gl)   #Creamos una Poisson con la lambda definida
#### Graficamos
layout(matrix(1:1,ncol=1)) #Presentamos un sólo gráfico en una sola columna por página
plot(Ex_Chi, type='l',xlim=c(0,8),  main="Distribución Chi-cuadrada", xlab="Conteo de casos",
cex.lab=1.3, cex.main=2, col="indianred", lwd=3, lty=3)
setwd("C:/Users/Adriana/Desktop/afchavez-019/JeanPiaget/Actividades")
Datos <- read.csv("Datos_JP.csv")
View(Datos)
Right <- c("d","c","b")
Datos$RC1 <- ifelse(Datos$RC1==Right[1], Datos$RC1<-1, Datos$RC1<-0)
Datos$RC2 <- ifelse(Datos$RC2==Right[2], Datos$RC2<-1, Datos$RC2<-0)
Datos$RC3 <- ifelse(Datos$RC3==Right[3], Datos$RC3<-1, Datos$RC3<-0)
View(Datos)
layout(matrix(1:3,ncol=3))
barplot(as.vector(table(Datos$RC1)), ylim=c(0,70), col=c("orange4","orange2"),
main="1) El bat y la pelota")
text(0.7,table(Datos$RC1)[1]+5,paste(table(Datos$RC1)[1]), cex=1.5, f=2)
text(1.9,table(Datos$RC1)[2]+5,paste(table(Datos$RC1)[2]), cex=1.5, f=2)
axis(1,c(0.7,1.9), c("Error","Acierto"))
barplot(as.vector(table(Datos$RC2)), ylim=c(0,70), col=c("palegreen4","palegreen2"),
main="2) Máquinas")
text(0.7,table(Datos$RC2)[1]+5,paste(table(Datos$RC2)[1]), cex=1.5, f=2)
text(1.9,table(Datos$RC2)[2]+5,paste(table(Datos$RC2)[2]), cex=1.5, f=2)
axis(1,c(0.7,1.9), c("Error","Acierto"))
barplot(as.vector(table(Datos$RC3)), ylim=c(0,70), col=c("mediumpurple4","mediumpurple1"),
main="3) El sendero")
text(0.7,table(Datos$RC3)[1]+3,paste(table(Datos$RC3)[1]), cex=1.5, f=2)
text(1.9,table(Datos$RC3)[2]+3,paste(table(Datos$RC3)[2]), cex=1.5, f=2)
axis(1,c(0.7,1.9), c("Error","Acierto"))
Total <- Datos$RC1 + Datos$RC2 + Datos$RC3
layout(matrix(1:1,ncol=1))
barplot(as.vector(table(Total)), main="Aciertos Finales", ylim=c(0,60),
col=c("dodgerblue3", "darkorange2", "darkorchid3", "chartreuse4"))
text(0.7,table(Total)[1]+5,paste(table(Total)[1]), cex=1.5, f=2)
text(1.9,table(Total)[2]+5,paste(table(Total)[2]), cex=1.5, f=2)
text(3.1,table(Total)[3]+5,paste(table(Total)[3]), cex=1.5, f=2)
text(4.3,table(Total)[4]+5,paste(table(Total)[4]), cex=1.5, f=2)
axis(1,c(0.7,1.9,3.1,4.3), c(0,1,2,3))
Total_4A <- Total[Datos$Grupo=="410"]
Total_4B <- Total[Datos$Grupo=="420"]
Total_5 <- Total[Datos$Grupo=="510"]
Total_6 <- Total[Datos$Grupo=="610"]
Tab_Total_4A <- as.vector(table(Total_4A))
Tab_Total_4B <- as.vector(table(Total_4B))
Tab_Total_5 <- as.vector(table(Total_5))
Tab_Total_6 <- as.vector(table(Total_6))
TOTAL_porGrupo <- c(Tab_Total_4A[1], Tab_Total_4B[1], Tab_Total_5[1], Tab_Total_6[1],
Tab_Total_4A[2], Tab_Total_4B[2], Tab_Total_5[2], Tab_Total_6[2],
Tab_Total_4A[3], Tab_Total_4B[3], Tab_Total_5[3], Tab_Total_6[3],
0, Tab_Total_4B[4], 0, Tab_Total_6[4])
espacios <- as.vector(seq(0.7,18.7,1.2))
barplot(TOTAL_porGrupo, main="Aciertos Totales por Grupo", ylim=c(0,20),
col=c(rep("dodgerblue3",4),rep("darkorange2",4),rep("darkorchid3",4),rep("chartreuse4",4)),
axes=F, cex.main=2)
axis(1,c(2.5,7.3,12.1,17), c(0:3), cex=2, f=2)
#axis(1,seq(0.7,18.7,1.2), c(rep(c("4A","4B","5","6"),4)), cex=2, f=2)
text(12.3,16,"Comparación 4*A - 4*B - 5to - 6to", cex=1.2, f=2)
axis(2,seq(0,20,1),seq(0,20,1))
for(a in 1:length(TOTAL_porGrupo)){
text(espacios[a],TOTAL_porGrupo[a]+1,paste(TOTAL_porGrupo[a]), cex=1.5, f=2)
}
plot(Datos$Edad, Datos$Numero.Elegido,pch=16, cex=2,
col=col_dots)
plot(Datos$Edad, Datos$Numero.Elegido,pch=16, cex=2,
col=col_dots)
plot(Datos$Edad, Datos$Numero.Elegido,pch=16, cex=2,
col=col_dots)
col_dots <- ifelse(Datos$Grupo=="410", col_dots<- "darkmagenta",
(ifelse(Datos$Grupo=="420",col_dots <- "chartreuse3",
(ifelse(Datos$Grupo=="510", col_dots <- "chocolate3",
(ifelse(Datos$Grupo=="610",col_dots <- "darkblue",a<-0.2)))))))
plot(Datos$Numero.Elegido,Total, pch=16, ann=F, axes=F, main="NùmeroElegido_x_TotalAciertos",
col=col_dots, cex=2)
legend(80,3, c("4A","4B","5to","6to"), lty=1, col=c("darkmagenta","chartreuse3","chocolate3","darkblue"), lwd=2)
axis(2,c(0:3), c(0:3))
axis(1,c(0:100), c(0:100))
plot(Datos$Edad, Datos$Numero.Elegido,pch=16, cex=2,
col=col_dots)
plot(Datos$Edad, Total,pch=16, cex=2,
col=col_dots)
